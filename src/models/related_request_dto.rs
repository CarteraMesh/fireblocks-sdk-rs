/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelatedRequestDto {
    #[serde(rename = "status")]
    pub status: models::RelatedRequestStatusType,
    /// Indicates whether there is an ongoing action for this position related to this request
    #[serde(rename = "inProgress")]
    pub in_progress: bool,
    /// Amount of tokens to Unstake
    #[serde(rename = "amount")]
    pub amount: String,
    /// The transaction ID of the ongoing request
    #[serde(rename = "txId", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
}

impl RelatedRequestDto {
    pub fn new(status: models::RelatedRequestStatusType, in_progress: bool, amount: String) -> RelatedRequestDto {
        RelatedRequestDto {
            status,
            in_progress,
            amount,
            tx_id: None,
        }
    }
}

