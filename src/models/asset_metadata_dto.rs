// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetMetadataDto {
    /// The Fireblocks` asset id
    #[serde(rename = "assetId")]
    pub asset_id: String,
    /// The name of the token
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The symbol of the token
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// The network protocol of the token
    #[serde(rename = "networkProtocol", skip_serializing_if = "Option::is_none")]
    pub network_protocol: Option<String>,
    /// The total supply of the token
    #[serde(rename = "totalSupply", skip_serializing_if = "Option::is_none")]
    pub total_supply: Option<String>,
    /// The number of holders of the token
    #[serde(rename = "holdersCount", skip_serializing_if = "Option::is_none")]
    pub holders_count: Option<f64>,
    /// The type of the token
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// The address of the token contract
    #[serde(rename = "contractAddress", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    /// In case of Stellar or Ripple, the address of the issuer of the token
    #[serde(rename = "issuerAddress", skip_serializing_if = "Option::is_none")]
    pub issuer_address: Option<String>,
    /// Is it deployed on testnet or to mainnet
    #[serde(rename = "testnet", skip_serializing_if = "Option::is_none")]
    pub testnet: Option<bool>,
    /// The blockchain native asset id which the token is deployed on
    #[serde(rename = "blockchain", skip_serializing_if = "Option::is_none")]
    pub blockchain: Option<String>,
    /// The number of decimals of the token
    #[serde(rename = "decimals", skip_serializing_if = "Option::is_none")]
    pub decimals: Option<f64>,
    /// The id of the vault account that initiated the request to issue the
    /// token. Will be empty if token was issued outside of Fireblocks.
    #[serde(rename = "vaultAccountId", skip_serializing_if = "Option::is_none")]
    pub vault_account_id: Option<String>,
}

impl AssetMetadataDto {
    pub fn new(asset_id: String) -> AssetMetadataDto {
        AssetMetadataDto {
            asset_id,
            name: None,
            symbol: None,
            network_protocol: None,
            total_supply: None,
            holders_count: None,
            r#type: None,
            contract_address: None,
            issuer_address: None,
            testnet: None,
            blockchain: None,
            decimals: None,
            vault_account_id: None,
        }
    }
}
