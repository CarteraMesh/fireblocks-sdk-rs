/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PolicyRuleCheckResult : The rule validation result
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyRuleCheckResult {
    /// Rule index number in the policy
    #[serde(rename = "index")]
    pub index: f64,
    /// Validation status
    #[serde(rename = "status")]
    pub status: Status,
    /// A set of rule validation error objects
    #[serde(rename = "errors")]
    pub errors: Vec<models::PolicyRuleError>,
}

impl PolicyRuleCheckResult {
    /// The rule validation result
    pub fn new(index: f64, status: Status, errors: Vec<models::PolicyRuleError>) -> PolicyRuleCheckResult {
        PolicyRuleCheckResult {
            index,
            status,
            errors,
        }
    }
}
/// Validation status
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "ok")]
    Ok,
    #[serde(rename = "failure")]
    Failure,
}

impl Default for Status {
    fn default() -> Status {
        Self::Ok
    }
}

