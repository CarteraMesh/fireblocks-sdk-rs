/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SmartTransferCreateTicket {
    #[serde(rename = "createdByNetworkId")]
    pub created_by_network_id: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Number of hours after which an OPEN ticket will expire if no term is funded.
    #[serde(rename = "expiresIn", skip_serializing_if = "Option::is_none")]
    pub expires_in: Option<f64>,
    #[serde(rename = "terms", skip_serializing_if = "Option::is_none")]
    pub terms: Option<Vec<models::SmartTransferCreateTicketTerm>>,
    #[serde(rename = "externalRefId", skip_serializing_if = "Option::is_none")]
    pub external_ref_id: Option<String>,
    #[serde(rename = "note", skip_serializing_if = "Option::is_none")]
    pub note: Option<String>,
    #[serde(rename = "submit", skip_serializing_if = "Option::is_none")]
    pub submit: Option<bool>,
}

impl SmartTransferCreateTicket {
    pub fn new(created_by_network_id: String, r#type: Type) -> SmartTransferCreateTicket {
        SmartTransferCreateTicket {
            created_by_network_id,
            r#type,
            expires_in: None,
            terms: None,
            external_ref_id: None,
            note: None,
            submit: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ASYNC")]
    Async,
}

impl Default for Type {
    fn default() -> Type {
        Self::Async
    }
}

