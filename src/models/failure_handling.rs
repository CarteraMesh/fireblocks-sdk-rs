/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FailureHandling : Failure handling for Workflows. If enabled with recovery process of type \"REVERSE\", upon the original WE failure, a reversed workflow generated.  In this reversed workflow, the initial operation is the last successful operation in the original WE, and the final operation is the first operation of the original WE. 
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FailureHandling {
    /// Flag to enable/disable failure handling
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::FailureHandlingType>,
}

impl FailureHandling {
    /// Failure handling for Workflows. If enabled with recovery process of type \"REVERSE\", upon the original WE failure, a reversed workflow generated.  In this reversed workflow, the initial operation is the last successful operation in the original WE, and the final operation is the first operation of the original WE. 
    pub fn new(enabled: bool) -> FailureHandling {
        FailureHandling {
            enabled,
            r#type: None,
        }
    }
}

