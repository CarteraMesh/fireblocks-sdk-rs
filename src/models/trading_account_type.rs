// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TradingAccountType {
    #[serde(rename = "COIN_FUTURES")]
    CoinFutures,
    #[serde(rename = "COIN_MARGINED_SWAP")]
    CoinMarginedSwap,
    #[serde(rename = "EXCHANGE")]
    Exchange,
    #[serde(rename = "FUNDING")]
    Funding,
    #[serde(rename = "FUNDABLE")]
    Fundable,
    #[serde(rename = "FUTURES")]
    Futures,
    #[serde(rename = "FUTURES_CROSS")]
    FuturesCross,
    #[serde(rename = "MARGIN")]
    Margin,
    #[serde(rename = "MARGIN_CROSS")]
    MarginCross,
    #[serde(rename = "OPTIONS")]
    Options,
    #[serde(rename = "SPOT")]
    Spot,
    #[serde(rename = "USDT_MARGINED_SWAP_CROSS")]
    UsdtMarginedSwapCross,
    #[serde(rename = "USDT_FUTURES")]
    UsdtFutures,
    #[serde(rename = "UNIFIED")]
    Unified,
}

impl std::fmt::Display for TradingAccountType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::CoinFutures => write!(f, "COIN_FUTURES"),
            Self::CoinMarginedSwap => write!(f, "COIN_MARGINED_SWAP"),
            Self::Exchange => write!(f, "EXCHANGE"),
            Self::Funding => write!(f, "FUNDING"),
            Self::Fundable => write!(f, "FUNDABLE"),
            Self::Futures => write!(f, "FUTURES"),
            Self::FuturesCross => write!(f, "FUTURES_CROSS"),
            Self::Margin => write!(f, "MARGIN"),
            Self::MarginCross => write!(f, "MARGIN_CROSS"),
            Self::Options => write!(f, "OPTIONS"),
            Self::Spot => write!(f, "SPOT"),
            Self::UsdtMarginedSwapCross => write!(f, "USDT_MARGINED_SWAP_CROSS"),
            Self::UsdtFutures => write!(f, "USDT_FUTURES"),
            Self::Unified => write!(f, "UNIFIED"),
        }
    }
}

impl Default for TradingAccountType {
    fn default() -> TradingAccountType {
        Self::CoinFutures
    }
}
