// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationGroups {
    #[serde(rename = "th", skip_serializing_if = "Option::is_none")]
    pub th: Option<f64>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Users>,
}

impl AuthorizationGroups {
    pub fn new() -> AuthorizationGroups {
        AuthorizationGroups {
            th: None,
            users: None,
        }
    }
}
///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Users {
    #[serde(rename = "PENDING_AUTHORIZATION")]
    PendingAuthorization,
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "NA")]
    Na,
}

impl Default for Users {
    fn default() -> Users {
        Self::PendingAuthorization
    }
}
