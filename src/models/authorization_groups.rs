/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AuthorizationGroups {
    #[serde(rename = "th", skip_serializing_if = "Option::is_none")]
    pub th: Option<f64>,
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Users>,
}

impl AuthorizationGroups {
    pub fn new() -> AuthorizationGroups {
        AuthorizationGroups {
            th: None,
            users: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Users {
    #[serde(rename = "PENDING_AUTHORIZATION")]
    PendingAuthorization,
    #[serde(rename = "APPROVED")]
    Approved,
    #[serde(rename = "REJECTED")]
    Rejected,
    #[serde(rename = "NA")]
    Na,
}

impl Default for Users {
    fn default() -> Users {
        Self::PendingAuthorization
    }
}

