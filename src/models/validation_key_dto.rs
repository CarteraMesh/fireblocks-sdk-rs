/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ValidationKeyDto {
    /// External validation key id set by Fireblocks.
    #[serde(rename = "keyId")]
    pub key_id: String,
    /// PEM encoded public key used for the validation.
    #[serde(rename = "publicKeyPem")]
    pub public_key_pem: String,
    #[serde(rename = "daysTillExpired")]
    pub days_till_expired: f64,
    /// True if the validation key is enabled.
    #[serde(rename = "enabled")]
    pub enabled: bool,
    /// Creation date (timestamp) in milliseconds.
    #[serde(rename = "createdAt")]
    pub created_at: f64,
}

impl ValidationKeyDto {
    pub fn new(key_id: String, public_key_pem: String, days_till_expired: f64, enabled: bool, created_at: f64) -> ValidationKeyDto {
        ValidationKeyDto {
            key_id,
            public_key_pem,
            days_till_expired,
            enabled,
            created_at,
        }
    }
}

