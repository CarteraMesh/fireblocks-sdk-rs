/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateVaultAssetResponse {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "address")]
    pub address: String,
    /// For BTC and some BTC forked assets only
    #[serde(rename = "legacyAddress", skip_serializing_if = "Option::is_none")]
    pub legacy_address: Option<String>,
    /// For ADA (Cardano) only
    #[serde(rename = "enterpriseAddress", skip_serializing_if = "Option::is_none")]
    pub enterprise_address: Option<String>,
    /// For Tag/Memo based assets only
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// For EOS only
    #[serde(rename = "eosAccountName", skip_serializing_if = "Option::is_none")]
    pub eos_account_name: Option<String>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "activationTxId", skip_serializing_if = "Option::is_none")]
    pub activation_tx_id: Option<String>,
}

impl CreateVaultAssetResponse {
    pub fn new(id: String, address: String) -> CreateVaultAssetResponse {
        CreateVaultAssetResponse {
            id,
            address,
            legacy_address: None,
            enterprise_address: None,
            tag: None,
            eos_account_name: None,
            status: None,
            activation_tx_id: None,
        }
    }
}

