// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleValidateTransactionRequest {
    /// Transaction asset symbol BTC,ETH)
    #[serde(rename = "transactionAsset")]
    pub transaction_asset: String,
    /// Transaction destination address
    #[serde(rename = "destination")]
    pub destination: String,
    /// Transaction amount in the transaction asset
    #[serde(rename = "transactionAmount")]
    pub transaction_amount: String,
    /// This is the identifier assigned to your VASP
    #[serde(rename = "originatorVASPdid")]
    pub originator_vas_pdid: String,
    /// \"True\" if the originator and beneficiary is the same person and you
    /// therefore do not need to collect any information. \"False\" if it is a
    /// third-party transfer.
    #[serde(rename = "originatorEqualsBeneficiary")]
    pub originator_equals_beneficiary: bool,
    /// This will also check if the transaction is a TRAVEL_RULE in the
    /// beneficiary VASP's jurisdiction
    #[serde(rename = "travelRuleBehavior", skip_serializing_if = "Option::is_none")]
    pub travel_rule_behavior: Option<bool>,
    /// This is the identifier assigned to the VASP the funds are being sent to
    #[serde(rename = "beneficiaryVASPdid", skip_serializing_if = "Option::is_none")]
    pub beneficiary_vas_pdid: Option<String>,
    /// Beneficiary VASP name
    #[serde(
        rename = "beneficiaryVASPname",
        skip_serializing_if = "Option::is_none"
    )]
    pub beneficiary_vas_pname: Option<String>,
    /// Beneficiary  name
    #[serde(rename = "beneficiaryName", skip_serializing_if = "Option::is_none")]
    pub beneficiary_name: Option<String>,
    /// Beneficiary  name
    #[serde(
        rename = "beneficiaryAccountNumber",
        skip_serializing_if = "Option::is_none"
    )]
    pub beneficiary_account_number: Option<String>,
    /// Beneficiary  name
    #[serde(rename = "beneficiaryAddress", skip_serializing_if = "Option::is_none")]
    pub beneficiary_address: Option<models::TravelRuleAddress>,
}

impl TravelRuleValidateTransactionRequest {
    pub fn new(
        transaction_asset: String,
        destination: String,
        transaction_amount: String,
        originator_vas_pdid: String,
        originator_equals_beneficiary: bool,
    ) -> TravelRuleValidateTransactionRequest {
        TravelRuleValidateTransactionRequest {
            transaction_asset,
            destination,
            transaction_amount,
            originator_vas_pdid,
            originator_equals_beneficiary,
            travel_rule_behavior: None,
            beneficiary_vas_pdid: None,
            beneficiary_vas_pname: None,
            beneficiary_name: None,
            beneficiary_account_number: None,
            beneficiary_address: None,
        }
    }
}
