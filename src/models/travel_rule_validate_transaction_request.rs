/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleValidateTransactionRequest {
    /// Transaction asset symbol BTC,ETH)
    #[serde(rename = "transactionAsset")]
    pub transaction_asset: String,
    /// Transaction destination address
    #[serde(rename = "destination")]
    pub destination: String,
    /// Transaction amount in the transaction asset
    #[serde(rename = "transactionAmount")]
    pub transaction_amount: String,
    /// This is the identifier assigned to your VASP
    #[serde(rename = "originatorVASPdid")]
    pub originator_vas_pdid: String,
    /// \"True\" if the originator and beneficiary is the same person and you therefore do not need to collect any information. \"False\" if it is a third-party transfer.
    #[serde(rename = "originatorEqualsBeneficiary")]
    pub originator_equals_beneficiary: bool,
    /// This will also check if the transaction is a TRAVEL_RULE in the beneficiary VASP's jurisdiction
    #[serde(rename = "travelRuleBehavior")]
    pub travel_rule_behavior: bool,
    /// This is the identifier assigned to the VASP the funds are being sent to
    #[serde(rename = "beneficiaryVASPdid")]
    pub beneficiary_vas_pdid: String,
    /// Beneficiary VASP name
    #[serde(rename = "beneficiaryVASPname")]
    pub beneficiary_vas_pname: String,
    /// Beneficiary  name
    #[serde(rename = "beneficiaryName")]
    pub beneficiary_name: String,
    /// Beneficiary  name
    #[serde(rename = "beneficiaryAccountNumber")]
    pub beneficiary_account_number: String,
    /// Beneficiary  name
    #[serde(rename = "beneficiaryAddress")]
    pub beneficiary_address: models::TravelRuleAddress,
}

impl TravelRuleValidateTransactionRequest {
    pub fn new(transaction_asset: String, destination: String, transaction_amount: String, originator_vas_pdid: String, originator_equals_beneficiary: bool, travel_rule_behavior: bool, beneficiary_vas_pdid: String, beneficiary_vas_pname: String, beneficiary_name: String, beneficiary_account_number: String, beneficiary_address: models::TravelRuleAddress) -> TravelRuleValidateTransactionRequest {
        TravelRuleValidateTransactionRequest {
            transaction_asset,
            destination,
            transaction_amount,
            originator_vas_pdid,
            originator_equals_beneficiary,
            travel_rule_behavior,
            beneficiary_vas_pdid,
            beneficiary_vas_pname,
            beneficiary_name,
            beneficiary_account_number,
            beneficiary_address,
        }
    }
}

