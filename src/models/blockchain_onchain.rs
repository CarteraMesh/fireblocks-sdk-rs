// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct BlockchainOnchain {
    /// The protocol of the blockchain
    #[serde(rename = "protocol")]
    pub protocol: String,
    /// Network/chain ID
    #[serde(rename = "chainId", skip_serializing_if = "Option::is_none")]
    pub chain_id: Option<String>,
    /// Is test blockchain
    #[serde(rename = "test")]
    pub test: bool,
    /// Signing alghorithm
    #[serde(rename = "signingAlgo")]
    pub signing_algo: SigningAlgo,
}

impl BlockchainOnchain {
    pub fn new(protocol: String, test: bool, signing_algo: SigningAlgo) -> BlockchainOnchain {
        BlockchainOnchain {
            protocol,
            chain_id: None,
            test,
            signing_algo,
        }
    }
}
/// Signing alghorithm
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SigningAlgo {
    #[serde(rename = "ECDSA_SECP256K1")]
    EcdsaSecp256K1,
    #[serde(rename = "EDDSA_ED25519")]
    EddsaEd25519,
}

impl Default for SigningAlgo {
    fn default() -> SigningAlgo {
        Self::EcdsaSecp256K1
    }
}
