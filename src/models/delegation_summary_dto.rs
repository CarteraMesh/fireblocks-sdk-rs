/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DelegationSummaryDto {
    /// An array of objects containing chain descriptors and associated amounts, representing active positions.
    #[serde(rename = "active")]
    pub active: Vec<models::AmountAndChainDescriptor>,
    /// An array of objects containing chain descriptors and associated amounts, representing inactive positions.
    #[serde(rename = "inactive")]
    pub inactive: Vec<models::AmountAndChainDescriptor>,
    /// An array of objects containing chain descriptors and associated amounts, representing rewards positions.
    #[serde(rename = "rewardsAmount")]
    pub rewards_amount: Vec<models::AmountAndChainDescriptor>,
    /// An array of objects with chain descriptors and total staked amounts, representing the combined staked totals of active and inactive positions.
    #[serde(rename = "totalStaked")]
    pub total_staked: Vec<models::AmountAndChainDescriptor>,
}

impl DelegationSummaryDto {
    pub fn new(active: Vec<models::AmountAndChainDescriptor>, inactive: Vec<models::AmountAndChainDescriptor>, rewards_amount: Vec<models::AmountAndChainDescriptor>, total_staked: Vec<models::AmountAndChainDescriptor>) -> DelegationSummaryDto {
        DelegationSummaryDto {
            active,
            inactive,
            rewards_amount,
            total_staked,
        }
    }
}

