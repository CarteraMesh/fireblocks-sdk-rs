/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CollectionMetadataDto {
    /// Fireblocks collection id
    #[serde(rename = "fbCollectionId")]
    pub fb_collection_id: String,
    /// Collection name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Collection symbol
    #[serde(rename = "symbol", skip_serializing_if = "Option::is_none")]
    pub symbol: Option<String>,
    /// Collection contract standard
    #[serde(rename = "standard", skip_serializing_if = "Option::is_none")]
    pub standard: Option<String>,
    /// Collection's blockchain
    #[serde(rename = "blockchainDescriptor")]
    pub blockchain_descriptor: String,
    /// Collection contract address
    #[serde(rename = "contractAddress", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
}

impl CollectionMetadataDto {
    pub fn new(fb_collection_id: String, blockchain_descriptor: String) -> CollectionMetadataDto {
        CollectionMetadataDto {
            fb_collection_id,
            name: None,
            symbol: None,
            standard: None,
            blockchain_descriptor,
            contract_address: None,
        }
    }
}

