/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SmartTransferTicketFilteredResponseDto {
    /// Result message
    #[serde(rename = "message", deserialize_with = "Option::deserialize")]
    pub message: Option<String>,
    /// Returns last skipped id if any preceding elements are skipped in result.
    #[serde(rename = "after")]
    pub after: String,
    /// Result that match given query criteria
    #[serde(rename = "data")]
    pub data: Vec<models::SmartTransferTicketDto>,
}

impl SmartTransferTicketFilteredResponseDto {
    pub fn new(message: Option<String>, after: String, data: Vec<models::SmartTransferTicketDto>) -> SmartTransferTicketFilteredResponseDto {
        SmartTransferTicketFilteredResponseDto {
            message,
            after,
            data,
        }
    }
}

