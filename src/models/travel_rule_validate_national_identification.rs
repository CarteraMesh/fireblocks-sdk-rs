// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

/// TravelRuleValidateNationalIdentification : Represents a national identifier
/// for a person or entity
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleValidateNationalIdentification {
    /// Country that issued the national identifier (ISO-3166 Alpha-2 country
    /// code)
    #[serde(rename = "countryOfIssue", skip_serializing_if = "Option::is_none")]
    pub country_of_issue: Option<String>,
    /// National identifier (max 35 characters)
    #[serde(rename = "nationalIdentifier", skip_serializing_if = "Option::is_none")]
    pub national_identifier: Option<String>,
    /// Type of national identifier. Acceptable values include: - 'PASSPORT':
    /// Passport number - 'NATIONAL_ID': National identification number -
    /// 'TAX_ID': Tax identification number - 'SOCIAL_SECURITY': Social security
    /// number
    #[serde(
        rename = "nationalIdentifierType",
        skip_serializing_if = "Option::is_none"
    )]
    pub national_identifier_type: Option<NationalIdentifierType>,
    /// Registration authority (format -> RA followed by 6 digits)
    #[serde(
        rename = "registrationAuthority",
        skip_serializing_if = "Option::is_none"
    )]
    pub registration_authority: Option<String>,
}

impl TravelRuleValidateNationalIdentification {
    /// Represents a national identifier for a person or entity
    pub fn new() -> TravelRuleValidateNationalIdentification {
        TravelRuleValidateNationalIdentification {
            country_of_issue: None,
            national_identifier: None,
            national_identifier_type: None,
            registration_authority: None,
        }
    }
}
/// Type of national identifier. Acceptable values include: - 'PASSPORT':
/// Passport number - 'NATIONAL_ID': National identification number - 'TAX_ID':
/// Tax identification number - 'SOCIAL_SECURITY': Social security number
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NationalIdentifierType {
    #[serde(rename = "PASSPORT")]
    Passport,
    #[serde(rename = "NATIONAL_ID")]
    NationalId,
    #[serde(rename = "TAX_ID")]
    TaxId,
    #[serde(rename = "SOCIAL_SECURITY")]
    SocialSecurity,
}

impl Default for NationalIdentifierType {
    fn default() -> NationalIdentifierType {
        Self::Passport
    }
}
