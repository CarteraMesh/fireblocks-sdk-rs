// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MpcKey {
    #[serde(rename = "keyId")]
    pub key_id: String,
    /// The user id that owns the key
    #[serde(rename = "userId")]
    pub user_id: String,
    /// The algorithm of the key
    #[serde(rename = "algorithm")]
    pub algorithm: f64,
    /// The players that are associated with the key
    #[serde(rename = "players")]
    pub players: Vec<models::Players>,
    /// The last index used on this key
    #[serde(
        rename = "lastPreprocessedIndex",
        skip_serializing_if = "Option::is_none"
    )]
    pub last_preprocessed_index: Option<f64>,
}

impl MpcKey {
    pub fn new(
        key_id: String,
        user_id: String,
        algorithm: f64,
        players: Vec<models::Players>,
    ) -> MpcKey {
        MpcKey {
            key_id,
            user_id,
            algorithm,
            players,
            last_preprocessed_index: None,
        }
    }
}
