/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SettlementResponse {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "initiator", skip_serializing_if = "Option::is_none")]
    pub initiator: Option<String>,
    #[serde(rename = "exchangeReply", skip_serializing_if = "Option::is_none")]
    pub exchange_reply: Option<String>,
    #[serde(rename = "fireblocksInitiatedTransactions", skip_serializing_if = "Option::is_none")]
    pub fireblocks_initiated_transactions: Option<serde_json::Value>,
    #[serde(rename = "exchangeRequestedTransactions", skip_serializing_if = "Option::is_none")]
    pub exchange_requested_transactions: Option<models::ExchangeSettlementTransactionsResponse>,
}

impl SettlementResponse {
    pub fn new() -> SettlementResponse {
        SettlementResponse {
            id: None,
            initiator: None,
            exchange_reply: None,
            fireblocks_initiated_transactions: None,
            exchange_requested_transactions: None,
        }
    }
}

