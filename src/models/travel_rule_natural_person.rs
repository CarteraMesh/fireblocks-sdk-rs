// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleNaturalPerson {
    /// An array of structured name identifiers for the natural person,
    /// referencing the TravelRuleNaturalPersonNameIdentifier schema.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<Vec<models::TravelRuleNaturalPersonNameIdentifier>>,
    /// An array of geographic addresses associated with the natural person,
    /// referencing the TravelRuleGeographicAddress schema.
    #[serde(rename = "geographicAddress", skip_serializing_if = "Option::is_none")]
    pub geographic_address: Option<Vec<models::TravelRuleGeographicAddress>>,
    /// The national identification of the natural person, referencing the
    /// TravelRuleNationalIdentification schema.
    #[serde(
        rename = "nationalIdentification",
        skip_serializing_if = "Option::is_none"
    )]
    pub national_identification: Option<models::TravelRuleNationalIdentification>,
    /// The date and place of birth of the natural person, referencing the
    /// TravelRuleDateAndPlaceOfBirth schema.
    #[serde(
        rename = "dateAndPlaceOfBirth",
        skip_serializing_if = "Option::is_none"
    )]
    pub date_and_place_of_birth: Option<models::TravelRuleDateAndPlaceOfBirth>,
    /// A unique identifier for the customer within the organization's context.
    /// The value must be encrypted.
    #[serde(
        rename = "customerIdentification",
        skip_serializing_if = "Option::is_none"
    )]
    pub customer_identification: Option<String>,
    /// The ISO-3166 Alpha-2 country code of the natural person's residence. The
    /// value must be encrypted.
    #[serde(rename = "countryOfResidence", skip_serializing_if = "Option::is_none")]
    pub country_of_residence: Option<String>,
    /// A distinct identifier that uniquely identifies the customer within the
    /// organization. The value must be encrypted.
    #[serde(rename = "customerNumber", skip_serializing_if = "Option::is_none")]
    pub customer_number: Option<String>,
}

impl TravelRuleNaturalPerson {
    pub fn new() -> TravelRuleNaturalPerson {
        TravelRuleNaturalPerson {
            name: None,
            geographic_address: None,
            national_identification: None,
            date_and_place_of_birth: None,
            customer_identification: None,
            country_of_residence: None,
            customer_number: None,
        }
    }
}
