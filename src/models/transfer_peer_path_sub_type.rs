// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TransferPeerPathSubType {
    #[serde(rename = "BINANCE")]
    Binance,
    #[serde(rename = "BINANCEUS")]
    Binanceus,
    #[serde(rename = "BITFINEX")]
    Bitfinex,
    #[serde(rename = "BITHUMB")]
    Bithumb,
    #[serde(rename = "BITMEX")]
    Bitmex,
    #[serde(rename = "BITSO")]
    Bitso,
    #[serde(rename = "BITSTAMP")]
    Bitstamp,
    #[serde(rename = "BITTREX")]
    Bittrex,
    #[serde(rename = "BLINC")]
    Blinc,
    #[serde(rename = "BULLISHEXCHANGE")]
    Bullishexchange,
    #[serde(rename = "BYBIT")]
    Bybit,
    #[serde(rename = "CIRCLE")]
    Circle,
    #[serde(rename = "COINBASEEXCHANGE")]
    Coinbaseexchange,
    #[serde(rename = "COINBASEPRO")]
    Coinbasepro,
    #[serde(rename = "COINMETRO")]
    Coinmetro,
    #[serde(rename = "COINSPRO")]
    Coinspro,
    #[serde(rename = "CRYPTOCOM")]
    Cryptocom,
    #[serde(rename = "DERIBIT")]
    Deribit,
    #[serde(rename = "GEMINI")]
    Gemini,
    #[serde(rename = "HITBTC")]
    Hitbtc,
    #[serde(rename = "HUOBI")]
    Huobi,
    #[serde(rename = "INDEPENDENTRESERVE")]
    Independentreserve,
    #[serde(rename = "KORBIT")]
    Korbit,
    #[serde(rename = "KRAKEN")]
    Kraken,
    #[serde(rename = "KRAKENINTL")]
    Krakenintl,
    #[serde(rename = "KUCOIN")]
    Kucoin,
    #[serde(rename = "LIQUID")]
    Liquid,
    #[serde(rename = "OKCOIN")]
    Okcoin,
    #[serde(rename = "OKEX")]
    Okex,
    #[serde(rename = "PAXOS")]
    Paxos,
    #[serde(rename = "POLONIEX")]
    Poloniex,
    #[serde(rename = "External")]
    External,
    #[serde(rename = "Internal")]
    Internal,
}

impl std::fmt::Display for TransferPeerPathSubType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Binance => write!(f, "BINANCE"),
            Self::Binanceus => write!(f, "BINANCEUS"),
            Self::Bitfinex => write!(f, "BITFINEX"),
            Self::Bithumb => write!(f, "BITHUMB"),
            Self::Bitmex => write!(f, "BITMEX"),
            Self::Bitso => write!(f, "BITSO"),
            Self::Bitstamp => write!(f, "BITSTAMP"),
            Self::Bittrex => write!(f, "BITTREX"),
            Self::Blinc => write!(f, "BLINC"),
            Self::Bullishexchange => write!(f, "BULLISHEXCHANGE"),
            Self::Bybit => write!(f, "BYBIT"),
            Self::Circle => write!(f, "CIRCLE"),
            Self::Coinbaseexchange => write!(f, "COINBASEEXCHANGE"),
            Self::Coinbasepro => write!(f, "COINBASEPRO"),
            Self::Coinmetro => write!(f, "COINMETRO"),
            Self::Coinspro => write!(f, "COINSPRO"),
            Self::Cryptocom => write!(f, "CRYPTOCOM"),
            Self::Deribit => write!(f, "DERIBIT"),
            Self::Gemini => write!(f, "GEMINI"),
            Self::Hitbtc => write!(f, "HITBTC"),
            Self::Huobi => write!(f, "HUOBI"),
            Self::Independentreserve => write!(f, "INDEPENDENTRESERVE"),
            Self::Korbit => write!(f, "KORBIT"),
            Self::Kraken => write!(f, "KRAKEN"),
            Self::Krakenintl => write!(f, "KRAKENINTL"),
            Self::Kucoin => write!(f, "KUCOIN"),
            Self::Liquid => write!(f, "LIQUID"),
            Self::Okcoin => write!(f, "OKCOIN"),
            Self::Okex => write!(f, "OKEX"),
            Self::Paxos => write!(f, "PAXOS"),
            Self::Poloniex => write!(f, "POLONIEX"),
            Self::External => write!(f, "External"),
            Self::Internal => write!(f, "Internal"),
        }
    }
}

impl Default for TransferPeerPathSubType {
    fn default() -> TransferPeerPathSubType {
        Self::Binance
    }
}
