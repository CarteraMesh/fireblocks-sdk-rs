/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VaultAsset {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The total wallet balance. In EOS this value includes the network balance, self staking and pending refund. For all other coins it is the balance as it appears on the blockchain.
    #[serde(rename = "total", skip_serializing_if = "Option::is_none")]
    pub total: Option<String>,
    /// Deprecated - replaced by \"total\"
    #[serde(rename = "balance", skip_serializing_if = "Option::is_none")]
    pub balance: Option<String>,
    /// Funds available for transfer. Equals the blockchain balance minus any locked amounts
    #[serde(rename = "available", skip_serializing_if = "Option::is_none")]
    pub available: Option<String>,
    /// The cumulative balance of all transactions pending to be cleared
    #[serde(rename = "pending", skip_serializing_if = "Option::is_none")]
    pub pending: Option<String>,
    /// The cumulative frozen balance
    #[serde(rename = "frozen", skip_serializing_if = "Option::is_none")]
    pub frozen: Option<String>,
    /// Funds in outgoing transactions that are not yet published to the network
    #[serde(rename = "lockedAmount", skip_serializing_if = "Option::is_none")]
    pub locked_amount: Option<String>,
    /// Staked balance
    #[serde(rename = "staked", skip_serializing_if = "Option::is_none")]
    pub staked: Option<String>,
    /// Deprecated
    #[serde(rename = "totalStakedCPU", skip_serializing_if = "Option::is_none")]
    pub total_staked_cpu: Option<f64>,
    /// Deprecated
    #[serde(rename = "totalStakedNetwork", skip_serializing_if = "Option::is_none")]
    pub total_staked_network: Option<String>,
    /// Deprecated
    #[serde(rename = "selfStakedCPU", skip_serializing_if = "Option::is_none")]
    pub self_staked_cpu: Option<String>,
    /// Deprecated
    #[serde(rename = "selfStakedNetwork", skip_serializing_if = "Option::is_none")]
    pub self_staked_network: Option<String>,
    /// Deprecated
    #[serde(rename = "pendingRefundCPU", skip_serializing_if = "Option::is_none")]
    pub pending_refund_cpu: Option<String>,
    /// Deprecated
    #[serde(rename = "pendingRefundNetwork", skip_serializing_if = "Option::is_none")]
    pub pending_refund_network: Option<String>,
    #[serde(rename = "blockHeight", skip_serializing_if = "Option::is_none")]
    pub block_height: Option<String>,
    #[serde(rename = "blockHash", skip_serializing_if = "Option::is_none")]
    pub block_hash: Option<String>,
    #[serde(rename = "rewardsInfo", skip_serializing_if = "Option::is_none")]
    pub rewards_info: Option<models::RewardsInfo>,
}

impl VaultAsset {
    pub fn new() -> VaultAsset {
        VaultAsset {
            id: None,
            total: None,
            balance: None,
            available: None,
            pending: None,
            frozen: None,
            locked_amount: None,
            staked: None,
            total_staked_cpu: None,
            total_staked_network: None,
            self_staked_cpu: None,
            self_staked_network: None,
            pending_refund_cpu: None,
            pending_refund_network: None,
            block_height: None,
            block_hash: None,
            rewards_info: None,
        }
    }
}

