/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CollectionDeployRequestDto {
    /// The blockchain base assetId
    #[serde(rename = "baseAssetId")]
    pub base_asset_id: String,
    /// The id of the vault account that initiated the request to issue the token
    #[serde(rename = "vaultAccountId")]
    pub vault_account_id: String,
    #[serde(rename = "type")]
    pub r#type: models::CollectionType,
    /// A string that represents the name of the collection
    #[serde(rename = "name")]
    pub name: String,
    /// A string that represents the symbol of the collection
    #[serde(rename = "symbol")]
    pub symbol: String,
    /// The EVM address of the user that will be set as the admin user of the collection
    #[serde(rename = "adminAddress")]
    pub admin_address: String,
    /// A string to display as a name of the collection
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
}

impl CollectionDeployRequestDto {
    pub fn new(base_asset_id: String, vault_account_id: String, r#type: models::CollectionType, name: String, symbol: String, admin_address: String) -> CollectionDeployRequestDto {
        CollectionDeployRequestDto {
            base_asset_id,
            vault_account_id,
            r#type,
            name,
            symbol,
            admin_address,
            display_name: None,
        }
    }
}

