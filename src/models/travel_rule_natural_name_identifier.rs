// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleNaturalNameIdentifier {
    /// The primary identifier of the name. The value must be encrypted.
    #[serde(rename = "primaryIdentifier", skip_serializing_if = "Option::is_none")]
    pub primary_identifier: Option<String>,
    /// The secondary identifier of the name. The value must be encrypted.
    #[serde(
        rename = "secondaryIdentifier",
        skip_serializing_if = "Option::is_none"
    )]
    pub secondary_identifier: Option<String>,
    /// The type of the name identifier. The value must be encrypted. The value
    /// must be one of the following: [LEGL, DBA, TRAD, NICK, ALIA, MAID, FORM,
    /// PREV, BORN, OTHR].
    #[serde(rename = "nameIdentifierType", skip_serializing_if = "Option::is_none")]
    pub name_identifier_type: Option<String>,
}

impl TravelRuleNaturalNameIdentifier {
    pub fn new() -> TravelRuleNaturalNameIdentifier {
        TravelRuleNaturalNameIdentifier {
            primary_identifier: None,
            secondary_identifier: None,
            name_identifier_type: None,
        }
    }
}
