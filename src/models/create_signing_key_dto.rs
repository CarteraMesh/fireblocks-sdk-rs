/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSigningKeyDto {
    /// The ID, name or label of the key specified on the customer's signing device.
    #[serde(rename = "signingDeviceKeyId")]
    pub signing_device_key_id: String,
    /// The signed certificate that includes the public key PEM of the signing key, signed by a validation key.
    #[serde(rename = "signedCertPem")]
    pub signed_cert_pem: String,
    /// Id of user to which this key belongs
    #[serde(rename = "agentUserId")]
    pub agent_user_id: String,
    #[serde(rename = "proofOfOwnership", skip_serializing_if = "Option::is_none")]
    pub proof_of_ownership: Option<models::CreateSigningKeyDtoProofOfOwnership>,
}

impl CreateSigningKeyDto {
    pub fn new(signing_device_key_id: String, signed_cert_pem: String, agent_user_id: String) -> CreateSigningKeyDto {
        CreateSigningKeyDto {
            signing_device_key_id,
            signed_cert_pem,
            agent_user_id,
            proof_of_ownership: None,
        }
    }
}

