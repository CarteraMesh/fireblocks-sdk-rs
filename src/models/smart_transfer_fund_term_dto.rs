/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SmartTransferFundTermDto {
    /// Asset name
    #[serde(rename = "asset")]
    pub asset: String,
    /// Amount
    #[serde(rename = "amount")]
    pub amount: String,
    /// Id of the network connection used.
    #[serde(rename = "networkConnectionId")]
    pub network_connection_id: String,
    /// Id of the vault that is used as the source of the asset.
    #[serde(rename = "srcId")]
    pub src_id: String,
    /// Source of the asset.
    #[serde(rename = "srcType")]
    pub src_type: String,
    /// Transaction fee
    #[serde(rename = "fee", skip_serializing_if = "Option::is_none")]
    pub fee: Option<String>,
    /// Transaction fee level.
    #[serde(rename = "feeLevel", skip_serializing_if = "Option::is_none")]
    pub fee_level: Option<String>,
}

impl SmartTransferFundTermDto {
    pub fn new(asset: String, amount: String, network_connection_id: String, src_id: String, src_type: String) -> SmartTransferFundTermDto {
        SmartTransferFundTermDto {
            asset,
            amount,
            network_connection_id,
            src_id,
            src_type,
            fee: None,
            fee_level: None,
        }
    }
}

