/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EstimatedFeeRequest {
    #[serde(rename = "operation", skip_serializing_if = "Option::is_none")]
    pub operation: Option<models::TransactionOperation>,
    /// The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)
    #[serde(rename = "assetId", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<models::TransferPeerPath>,
    #[serde(rename = "destination", skip_serializing_if = "Option::is_none")]
    pub destination: Option<models::DestinationTransferPeerPath>,
    /// For UTXO based blockchains, you can send a single transaction to multiple destinations.
    #[serde(rename = "destinations", skip_serializing_if = "Option::is_none")]
    pub destinations: Option<Vec<models::TransactionRequestDestination>>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<models::TransactionRequestAmount>,
    /// \"When set to `true`, the fee will be deducted from the requested amount.\"  **Note**: This parameter can only be considered if a transaction’s asset is a base asset, such as ETH or MATIC. If the asset can’t be used for transaction fees, like USDC, this parameter is ignored and the fee is deducted from the relevant base asset wallet in the source account.
    #[serde(rename = "treatAsGrossAmount", skip_serializing_if = "Option::is_none")]
    pub treat_as_gross_amount: Option<bool>,
    #[serde(rename = "extraParameters", skip_serializing_if = "Option::is_none")]
    pub extra_parameters: Option<models::ExtraParameters>,
}

impl EstimatedFeeRequest {
    pub fn new() -> EstimatedFeeRequest {
        EstimatedFeeRequest {
            operation: None,
            asset_id: None,
            source: None,
            destination: None,
            destinations: None,
            amount: None,
            treat_as_gross_amount: None,
            extra_parameters: None,
        }
    }
}

