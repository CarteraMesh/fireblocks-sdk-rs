/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DelegationDto {
    /// The unique identifier of the staking position
    #[serde(rename = "id")]
    pub id: String,
    /// The source vault account to stake from
    #[serde(rename = "vaultAccountId")]
    pub vault_account_id: String,
    /// The destination validator address name
    #[serde(rename = "validatorName")]
    pub validator_name: String,
    /// The destination validator provider name
    #[serde(rename = "providerName")]
    pub provider_name: String,
    /// The protocol identifier (e.g. \"ETH\"/ \"SOL\") to use
    #[serde(rename = "chainDescriptor")]
    pub chain_descriptor: String,
    /// Amount of tokens to stake, measured in the staked asset unit.
    #[serde(rename = "amount")]
    pub amount: String,
    /// The amount staked in the position, measured in the staked asset unit.
    #[serde(rename = "rewardsAmount")]
    pub rewards_amount: String,
    /// When was the request made (ISO Date).
    #[serde(rename = "dateCreated")]
    pub date_created: String,
    /// The current status.
    #[serde(rename = "status")]
    pub status: Status,
    /// An array of transaction objects related to this position. Each object includes a 'txId' representing the transaction ID and a 'completed' boolean indicating if the transaction was completed.
    #[serde(rename = "relatedTransactions")]
    pub related_transactions: Vec<models::RelatedTransactionDto>,
    /// The destination address of the staking transaction.
    #[serde(rename = "validatorAddress")]
    pub validator_address: String,
    /// The unique identifier of the staking provider
    #[serde(rename = "providerId")]
    pub provider_id: String,
    /// An array of available actions that can be performed. for example, actions like \"unstake\" or \"withdraw\".
    #[serde(rename = "availableActions")]
    pub available_actions: Vec<String>,
    /// Indicates whether there is an ongoing action for this position (true if ongoing, false if not).
    #[serde(rename = "inProgress")]
    pub in_progress: bool,
    /// The transaction ID of the ongoing request
    #[serde(rename = "inProgressTxId", skip_serializing_if = "Option::is_none")]
    pub in_progress_tx_id: Option<String>,
    /// Additional fields per blockchain - can be empty or missing if not initialized or no additional info exists. The type depends on the chainDescriptor value. For Solana (SOL), stake account address. For Ethereum (ETH), an empty object is returned as no specific data is available.
    #[serde(rename = "blockchainPositionInfo")]
    pub blockchain_position_info: models::SolanaBlockchainDataDto,
    /// An array of partial unstake requests for this position, relevant only for the Lido provider.  Each object includes the status of the unstake request, a boolean indicating whether the action is in progress, the amount of tokens to unstake, and the transaction ID of the request.  With Lido, a position may have multiple partial unstake requests in different states. This field is optional and not applicable for other providers. 
    #[serde(rename = "relatedRequests", skip_serializing_if = "Option::is_none")]
    pub related_requests: Option<Vec<models::RelatedRequestDto>>,
}

impl DelegationDto {
    pub fn new(id: String, vault_account_id: String, validator_name: String, provider_name: String, chain_descriptor: String, amount: String, rewards_amount: String, date_created: String, status: Status, related_transactions: Vec<models::RelatedTransactionDto>, validator_address: String, provider_id: String, available_actions: Vec<String>, in_progress: bool, blockchain_position_info: models::SolanaBlockchainDataDto) -> DelegationDto {
        DelegationDto {
            id,
            vault_account_id,
            validator_name,
            provider_name,
            chain_descriptor,
            amount,
            rewards_amount,
            date_created,
            status,
            related_transactions,
            validator_address,
            provider_id,
            available_actions,
            in_progress,
            in_progress_tx_id: None,
            blockchain_position_info,
            related_requests: None,
        }
    }
}
/// The current status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "creating")]
    Creating,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "activating")]
    Activating,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "deactivating")]
    Deactivating,
    #[serde(rename = "deactivated")]
    Deactivated,
    #[serde(rename = "withdrawing")]
    Withdrawing,
    #[serde(rename = "withdrawn")]
    Withdrawn,
}

impl Default for Status {
    fn default() -> Status {
        Self::Error
    }
}

