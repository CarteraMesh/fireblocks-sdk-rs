/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PolicySrcOrDestType : * EXCHANGE - A third-party exchange account connected to your workspace * UNMANAGED - A unmanaged wallet outside of Fireblocks workspace * VAULT - An account in your Fireblocks Vault * NETWORK_CONNECTION - A connection in your Fireblocks network * COMPOUND - (deprecated) An asset retrieved by using the Compound DeFI protocol * FIAT_ACCOUNT - A third-party fiat account connected to your workspace * ONE_TIME_ADDRESS - A non-whitelisted asset from your Fireblocks Workspace * \"*\" - All types 
/// * EXCHANGE - A third-party exchange account connected to your workspace * UNMANAGED - A unmanaged wallet outside of Fireblocks workspace * VAULT - An account in your Fireblocks Vault * NETWORK_CONNECTION - A connection in your Fireblocks network * COMPOUND - (deprecated) An asset retrieved by using the Compound DeFI protocol * FIAT_ACCOUNT - A third-party fiat account connected to your workspace * ONE_TIME_ADDRESS - A non-whitelisted asset from your Fireblocks Workspace * \"*\" - All types 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum PolicySrcOrDestType {
    #[serde(rename = "EXCHANGE")]
    Exchange,
    #[serde(rename = "UNMANAGED")]
    Unmanaged,
    #[serde(rename = "VAULT")]
    Vault,
    #[serde(rename = "NETWORK_CONNECTION")]
    NetworkConnection,
    #[serde(rename = "COMPOUND")]
    Compound,
    #[serde(rename = "FIAT_ACCOUNT")]
    FiatAccount,
    #[serde(rename = "ONE_TIME_ADDRESS")]
    OneTimeAddress,
    #[serde(rename = "*")]
    Star,

}

impl std::fmt::Display for PolicySrcOrDestType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Exchange => write!(f, "EXCHANGE"),
            Self::Unmanaged => write!(f, "UNMANAGED"),
            Self::Vault => write!(f, "VAULT"),
            Self::NetworkConnection => write!(f, "NETWORK_CONNECTION"),
            Self::Compound => write!(f, "COMPOUND"),
            Self::FiatAccount => write!(f, "FIAT_ACCOUNT"),
            Self::OneTimeAddress => write!(f, "ONE_TIME_ADDRESS"),
            Self::Star => write!(f, "*"),
        }
    }
}

impl Default for PolicySrcOrDestType {
    fn default() -> PolicySrcOrDestType {
        Self::Exchange
    }
}

