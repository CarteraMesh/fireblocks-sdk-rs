/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ExecutionTransferOperation {
    #[serde(rename = "operationId")]
    pub operation_id: String,
    #[serde(rename = "status")]
    pub status: models::ExecutionOperationStatus,
    #[serde(rename = "validationFailure", skip_serializing_if = "Option::is_none")]
    pub validation_failure: Option<models::TransferValidationFailure>,
    #[serde(rename = "operationType")]
    pub operation_type: models::TransferOperationType,
    #[serde(rename = "preview", skip_serializing_if = "Option::is_none")]
    pub preview: Option<models::TransferOperationPreview>,
    #[serde(rename = "execution", skip_serializing_if = "Option::is_none")]
    pub execution: Option<models::TransferOperationExecution>,
}

impl ExecutionTransferOperation {
    pub fn new(operation_id: String, status: models::ExecutionOperationStatus, operation_type: models::TransferOperationType) -> ExecutionTransferOperation {
        ExecutionTransferOperation {
            operation_id,
            status,
            validation_failure: None,
            operation_type,
            preview: None,
            execution: None,
        }
    }
}

