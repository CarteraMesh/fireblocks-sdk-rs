// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use serde::{Deserialize, Serialize};

/// AssetTypeResponse : Supported Asset Object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetTypeResponse {
    /// Unique asset identifier
    #[serde(rename = "id")]
    pub id: String,
    /// The name of the asset
    #[serde(rename = "name")]
    pub name: String,
    /// Asset type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Contract address of EVM based tokens
    #[serde(rename = "contractAddress", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    /// The native asset ID
    #[serde(rename = "nativeAsset", skip_serializing_if = "Option::is_none")]
    pub native_asset: Option<String>,
    /// Decimals of the asset
    #[serde(rename = "decimals", skip_serializing_if = "Option::is_none")]
    pub decimals: Option<f64>,
}

impl AssetTypeResponse {
    /// Supported Asset Object
    pub fn new(id: String, name: String, r#type: Type) -> AssetTypeResponse {
        AssetTypeResponse {
            id,
            name,
            r#type,
            contract_address: None,
            native_asset: None,
            decimals: None,
        }
    }
}
/// Asset type
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "BASE_ASSET")]
    BaseAsset,
    #[serde(rename = "ERC20")]
    Erc20,
    #[serde(rename = "BEP20")]
    Bep20,
    #[serde(rename = "COMPOUND")]
    Compound,
    #[serde(rename = "TRON_TRC20")]
    TronTrc20,
    #[serde(rename = "NEAR_ASSET")]
    NearAsset,
    #[serde(rename = "SOL_ASSET")]
    SolAsset,
    #[serde(rename = "FIAT")]
    Fiat,
    #[serde(rename = "ALGO_ASSET")]
    AlgoAsset,
    #[serde(rename = "XLM_ASSET")]
    XlmAsset,
    #[serde(rename = "XDB_ASSET")]
    XdbAsset,
}

impl Default for Type {
    fn default() -> Type {
        Self::BaseAsset
    }
}
