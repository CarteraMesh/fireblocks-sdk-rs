// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
    serde_with::{DeserializeFromStr, SerializeDisplay},
    std::{fmt, str::FromStr},
};

/// AssetTypeResponse : Supported Asset Object
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AssetTypeResponse {
    /// Unique asset identifier
    #[serde(rename = "id")]
    pub id: String,
    /// The name of the asset
    #[serde(rename = "name")]
    pub name: String,
    /// Asset type
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Contract address of EVM based tokens
    #[serde(rename = "contractAddress", skip_serializing_if = "Option::is_none")]
    pub contract_address: Option<String>,
    /// The native asset ID
    #[serde(rename = "nativeAsset", skip_serializing_if = "Option::is_none")]
    pub native_asset: Option<String>,
    /// Decimals of the asset
    #[serde(rename = "decimals", skip_serializing_if = "Option::is_none")]
    pub decimals: Option<f64>,
}

impl AssetTypeResponse {
    /// Supported Asset Object
    pub fn new(id: String, name: String, r#type: Type) -> AssetTypeResponse {
        AssetTypeResponse {
            id,
            name,
            r#type,
            contract_address: None,
            native_asset: None,
            decimals: None,
        }
    }
}
/// Asset type
#[derive(
    Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, DeserializeFromStr, SerializeDisplay,
)]
pub enum Type {
    BaseAsset,
    Erc20,
    Bep20,
    Compound,
    TronTrc20,
    NearAsset,
    SolAsset,
    Fiat,
    AlgoAsset,
    XlmAsset,
    XdbAsset,
    Other(String),
}

impl Default for Type {
    fn default() -> Type {
        Self::BaseAsset
    }
}

impl fmt::Display for Type {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Type::BaseAsset => write!(f, "BASE_ASSET"),
            Type::Erc20 => write!(f, "ERC20"),
            Type::Bep20 => write!(f, "BEP20"),
            Type::Compound => write!(f, "COMPOUND"),
            Type::TronTrc20 => write!(f, "TRON_TRC20"),
            Type::NearAsset => write!(f, "NEAR_ASSET"),
            Type::SolAsset => write!(f, "SOL_ASSET"),
            Type::Fiat => write!(f, "FIAT"),
            Type::AlgoAsset => write!(f, "ALGO_ASSET"),
            Type::XlmAsset => write!(f, "XLM_ASSET"),
            Type::XdbAsset => write!(f, "XDB_ASSET"),
            Type::Other(value) => write!(f, "{value}"),
        }
    }
}

impl FromStr for Type {
    type Err = crate::FireblocksError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "BASE_ASSET" => Ok(Type::BaseAsset),
            "ERC20" => Ok(Type::Erc20),
            "BEP20" => Ok(Type::Bep20),
            "COMPOUND" => Ok(Type::Compound),
            "TRON_TRC20" => Ok(Type::TronTrc20),
            "NEAR_ASSET" => Ok(Type::NearAsset),
            "SOL_ASSET" => Ok(Type::SolAsset),
            "FIAT" => Ok(Type::Fiat),
            "ALGO_ASSET" => Ok(Type::AlgoAsset),
            "XLM_ASSET" => Ok(Type::XlmAsset),
            "XDB_ASSET" => Ok(Type::XdbAsset),
            other => Ok(Type::Other(other.to_string())),
        }
    }
}
