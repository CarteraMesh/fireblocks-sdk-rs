// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use serde::{Deserialize, Serialize};

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WebhookEvent {
    #[serde(rename = "transaction.created")]
    TransactionPeriodCreated,
    #[serde(rename = "transaction.status.updated")]
    TransactionPeriodStatusPeriodUpdated,
    #[serde(rename = "transaction.approval_status.updated")]
    TransactionPeriodApprovalStatusPeriodUpdated,
    #[serde(rename = "external_wallet.asset.added")]
    ExternalWalletPeriodAssetPeriodAdded,
    #[serde(rename = "internal_wallet.asset.added")]
    InternalWalletPeriodAssetPeriodAdded,
    #[serde(rename = "internal_wallet.asset.removed")]
    InternalWalletPeriodAssetPeriodRemoved,
    #[serde(rename = "contract_wallet.asset.added")]
    ContractWalletPeriodAssetPeriodAdded,
    #[serde(rename = "contract_wallet.asset.removed")]
    ContractWalletPeriodAssetPeriodRemoved,
    #[serde(rename = "vault_account.created")]
    VaultAccountPeriodCreated,
    #[serde(rename = "vault_account.asset.added")]
    VaultAccountPeriodAssetPeriodAdded,
    #[serde(rename = "vault_account.asset.balance_updated")]
    VaultAccountPeriodAssetPeriodBalanceUpdated,
    #[serde(rename = "vault_account.nft.balance_updated")]
    VaultAccountPeriodNftPeriodBalanceUpdated,
    #[serde(rename = "embedded_wallet.asset.added")]
    EmbeddedWalletPeriodAssetPeriodAdded,
    #[serde(rename = "embedded_wallet.asset.balance_updated")]
    EmbeddedWalletPeriodAssetPeriodBalanceUpdated,
    #[serde(rename = "exchange_account.added")]
    ExchangeAccountPeriodAdded,
    #[serde(rename = "fiat_account.added")]
    FiatAccountPeriodAdded,
    #[serde(rename = "ticket.created")]
    TicketPeriodCreated,
    #[serde(rename = "ticket.submitted")]
    TicketPeriodSubmitted,
    #[serde(rename = "ticket.expired")]
    TicketPeriodExpired,
    #[serde(rename = "ticket.canceled")]
    TicketPeriodCanceled,
    #[serde(rename = "ticket.fulfilled")]
    TicketPeriodFulfilled,
    #[serde(rename = "ticket.counterparty.added")]
    TicketPeriodCounterpartyPeriodAdded,
    #[serde(rename = "ticket.counterparty_external_id.set")]
    TicketPeriodCounterpartyExternalIdPeriodSet,
    #[serde(rename = "ticket.note.added")]
    TicketPeriodNotePeriodAdded,
    #[serde(rename = "ticket.expired_in.set")]
    TicketPeriodExpiredInPeriodSet,
    #[serde(rename = "ticket.expired_at.set")]
    TicketPeriodExpiredAtPeriodSet,
    #[serde(rename = "ticket.term.added")]
    TicketPeriodTermPeriodAdded,
    #[serde(rename = "ticket.term.updated")]
    TicketPeriodTermPeriodUpdated,
    #[serde(rename = "ticket.term.deleted")]
    TicketPeriodTermPeriodDeleted,
    #[serde(rename = "ticket.term.funded")]
    TicketPeriodTermPeriodFunded,
    #[serde(rename = "ticket.term.manually_funded")]
    TicketPeriodTermPeriodManuallyFunded,
    #[serde(rename = "ticket.term.funding_canceled")]
    TicketPeriodTermPeriodFundingCanceled,
    #[serde(rename = "ticket.term.funding_failed")]
    TicketPeriodTermPeriodFundingFailed,
    #[serde(rename = "ticket.term.funding_completed")]
    TicketPeriodTermPeriodFundingCompleted,
    #[serde(rename = "ticket.term.transaction_status_changed")]
    TicketPeriodTermPeriodTransactionStatusChanged,
}

impl std::fmt::Display for WebhookEvent {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::TransactionPeriodCreated => write!(f, "transaction.created"),
            Self::TransactionPeriodStatusPeriodUpdated => write!(f, "transaction.status.updated"),
            Self::TransactionPeriodApprovalStatusPeriodUpdated => {
                write!(f, "transaction.approval_status.updated")
            }
            Self::ExternalWalletPeriodAssetPeriodAdded => write!(f, "external_wallet.asset.added"),
            Self::InternalWalletPeriodAssetPeriodAdded => write!(f, "internal_wallet.asset.added"),
            Self::InternalWalletPeriodAssetPeriodRemoved => {
                write!(f, "internal_wallet.asset.removed")
            }
            Self::ContractWalletPeriodAssetPeriodAdded => write!(f, "contract_wallet.asset.added"),
            Self::ContractWalletPeriodAssetPeriodRemoved => {
                write!(f, "contract_wallet.asset.removed")
            }
            Self::VaultAccountPeriodCreated => write!(f, "vault_account.created"),
            Self::VaultAccountPeriodAssetPeriodAdded => write!(f, "vault_account.asset.added"),
            Self::VaultAccountPeriodAssetPeriodBalanceUpdated => {
                write!(f, "vault_account.asset.balance_updated")
            }
            Self::VaultAccountPeriodNftPeriodBalanceUpdated => {
                write!(f, "vault_account.nft.balance_updated")
            }
            Self::EmbeddedWalletPeriodAssetPeriodAdded => write!(f, "embedded_wallet.asset.added"),
            Self::EmbeddedWalletPeriodAssetPeriodBalanceUpdated => {
                write!(f, "embedded_wallet.asset.balance_updated")
            }
            Self::ExchangeAccountPeriodAdded => write!(f, "exchange_account.added"),
            Self::FiatAccountPeriodAdded => write!(f, "fiat_account.added"),
            Self::TicketPeriodCreated => write!(f, "ticket.created"),
            Self::TicketPeriodSubmitted => write!(f, "ticket.submitted"),
            Self::TicketPeriodExpired => write!(f, "ticket.expired"),
            Self::TicketPeriodCanceled => write!(f, "ticket.canceled"),
            Self::TicketPeriodFulfilled => write!(f, "ticket.fulfilled"),
            Self::TicketPeriodCounterpartyPeriodAdded => write!(f, "ticket.counterparty.added"),
            Self::TicketPeriodCounterpartyExternalIdPeriodSet => {
                write!(f, "ticket.counterparty_external_id.set")
            }
            Self::TicketPeriodNotePeriodAdded => write!(f, "ticket.note.added"),
            Self::TicketPeriodExpiredInPeriodSet => write!(f, "ticket.expired_in.set"),
            Self::TicketPeriodExpiredAtPeriodSet => write!(f, "ticket.expired_at.set"),
            Self::TicketPeriodTermPeriodAdded => write!(f, "ticket.term.added"),
            Self::TicketPeriodTermPeriodUpdated => write!(f, "ticket.term.updated"),
            Self::TicketPeriodTermPeriodDeleted => write!(f, "ticket.term.deleted"),
            Self::TicketPeriodTermPeriodFunded => write!(f, "ticket.term.funded"),
            Self::TicketPeriodTermPeriodManuallyFunded => write!(f, "ticket.term.manually_funded"),
            Self::TicketPeriodTermPeriodFundingCanceled => {
                write!(f, "ticket.term.funding_canceled")
            }
            Self::TicketPeriodTermPeriodFundingFailed => write!(f, "ticket.term.funding_failed"),
            Self::TicketPeriodTermPeriodFundingCompleted => {
                write!(f, "ticket.term.funding_completed")
            }
            Self::TicketPeriodTermPeriodTransactionStatusChanged => {
                write!(f, "ticket.term.transaction_status_changed")
            }
        }
    }
}

impl Default for WebhookEvent {
    fn default() -> WebhookEvent {
        Self::TransactionPeriodCreated
    }
}
