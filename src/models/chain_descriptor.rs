// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
    serde_with::{DeserializeFromStr, SerializeDisplay},
    std::str::FromStr,
};

///
#[derive(
    Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, SerializeDisplay, DeserializeFromStr,
)]
pub enum ChainDescriptor {
    Eth,
    Sol,
    Matic,
    EthTest6,
    SolTest,
    Other(String),
}

impl std::fmt::Display for ChainDescriptor {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Eth => write!(f, "ETH"),
            Self::Sol => write!(f, "SOL"),
            Self::Matic => write!(f, "MATIC"),
            Self::EthTest6 => write!(f, "ETH_TEST6"),
            Self::SolTest => write!(f, "SOL_TEST"),
            Self::Other(s) => write!(f, "{s}"),
        }
    }
}

impl FromStr for ChainDescriptor {
    type Err = crate::FireblocksError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "ETH" => Ok(Self::Eth),
            "SOL" => Ok(Self::Sol),
            "MATIC" => Ok(Self::Matic),
            "EthTest6" => Ok(Self::EthTest6),
            "SOL_TEST" => Ok(Self::SolTest),
            _ => Ok(Self::Other(String::from(s))),
        }
    }
}

impl Default for ChainDescriptor {
    fn default() -> ChainDescriptor {
        Self::Eth
    }
}
