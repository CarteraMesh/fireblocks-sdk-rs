// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetFilterParameter {
    /// Unique connection ID
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// User ID that established the connection
    #[serde(rename = "userId", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Unique vault account identifier that the connection was established with
    #[serde(rename = "vaultAccountId", skip_serializing_if = "Option::is_none")]
    pub vault_account_id: Option<f64>,
    /// The method that the connection was established with.  - MOBILE: for
    /// connections that were established by scanning a WalletConnect QR code  -
    /// DESKTOP: for connection that were established by WalletConnect desktop
    /// connections
    #[serde(rename = "connectionMethod", skip_serializing_if = "Option::is_none")]
    pub connection_method: Option<ConnectionMethod>,
    /// The fee level for the transactions over the connection
    #[serde(rename = "feeLevel", skip_serializing_if = "Option::is_none")]
    pub fee_level: Option<FeeLevel>,
    /// The dApp URL
    #[serde(rename = "appUrl", skip_serializing_if = "Option::is_none")]
    pub app_url: Option<String>,
    /// dApps name
    #[serde(rename = "appName", skip_serializing_if = "Option::is_none")]
    pub app_name: Option<String>,
}

impl std::fmt::Display for GetFilterParameter {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        tracing::warn!("todo! GetFilterParameter toString");
        write!(f, "")
    }
}

impl GetFilterParameter {
    pub fn new() -> GetFilterParameter {
        GetFilterParameter {
            id: None,
            user_id: None,
            vault_account_id: None,
            connection_method: None,
            fee_level: None,
            app_url: None,
            app_name: None,
        }
    }
}
/// The method that the connection was established with.  - MOBILE: for
/// connections that were established by scanning a WalletConnect QR code  -
/// DESKTOP: for connection that were established by WalletConnect desktop
/// connections
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectionMethod {
    #[serde(rename = "MOBILE")]
    Mobile,
    #[serde(rename = "DESKTOP")]
    Desktop,
}

impl Default for ConnectionMethod {
    fn default() -> ConnectionMethod {
        Self::Mobile
    }
}
/// The fee level for the transactions over the connection
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FeeLevel {
    #[serde(rename = "MEDIUM")]
    Medium,
    #[serde(rename = "HIGH")]
    High,
}

impl Default for FeeLevel {
    fn default() -> FeeLevel {
        Self::Medium
    }
}
