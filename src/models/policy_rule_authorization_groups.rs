/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// PolicyRuleAuthorizationGroups : Defines the transaction approval terms
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PolicyRuleAuthorizationGroups {
    /// * AND - requires approval of all authorization groups * OR - requires approval of at least one of the authorization groups 
    #[serde(rename = "logic", skip_serializing_if = "Option::is_none")]
    pub logic: Option<Logic>,
    /// Defines whether the user who initiates a transaction can approve their own transaction and count toward the approval threshold for their transaction
    #[serde(rename = "allowOperatorAsAuthorizer", skip_serializing_if = "Option::is_none")]
    pub allow_operator_as_authorizer: Option<bool>,
    /// Groups of entities which can approve the transaction
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<models::PolicyRuleAuthorizationGroupsGroupsInner>>,
}

impl PolicyRuleAuthorizationGroups {
    /// Defines the transaction approval terms
    pub fn new() -> PolicyRuleAuthorizationGroups {
        PolicyRuleAuthorizationGroups {
            logic: None,
            allow_operator_as_authorizer: None,
            groups: None,
        }
    }
}
/// * AND - requires approval of all authorization groups * OR - requires approval of at least one of the authorization groups 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Logic {
    #[serde(rename = "AND")]
    And,
    #[serde(rename = "OR")]
    Or,
}

impl Default for Logic {
    fn default() -> Logic {
        Self::And
    }
}

