/*
 * Fireblocks API
 *
 * Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com) 
 *
 * The version of the OpenAPI document: 1.8.0
 * Contact: developers@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AmountAggregationTimePeriodMethod : * PER_SINGLE_MATCH - Apply the limit to each listed entity * ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities 
/// * PER_SINGLE_MATCH - Apply the limit to each listed entity * ACROSS_ALL_MATCHES - Apply the limit to the sum of all listed entities 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AmountAggregationTimePeriodMethod {
    #[serde(rename = "PER_SINGLE_MATCH")]
    PerSingleMatch,
    #[serde(rename = "ACROSS_ALL_MATCHES")]
    AcrossAllMatches,

}

impl std::fmt::Display for AmountAggregationTimePeriodMethod {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::PerSingleMatch => write!(f, "PER_SINGLE_MATCH"),
            Self::AcrossAllMatches => write!(f, "ACROSS_ALL_MATCHES"),
        }
    }
}

impl Default for AmountAggregationTimePeriodMethod {
    fn default() -> AmountAggregationTimePeriodMethod {
        Self::PerSingleMatch
    }
}

