// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

/// ComplianceResultFullPayload : The result of the Compliance AML/Travel Rule
/// screening.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ComplianceResultFullPayload {
    /// The end result of the AML screening.
    #[serde(rename = "aml", skip_serializing_if = "Option::is_none")]
    pub aml: Option<Vec<models::ComplianceScreeningResultFullPayload>>,
    /// The result of the Travel Rule screening.
    #[serde(rename = "tr", skip_serializing_if = "Option::is_none")]
    pub tr: Option<Vec<models::ComplianceScreeningResultFullPayload>>,
    /// The list of all results of the AML screening.
    #[serde(rename = "amlList", skip_serializing_if = "Option::is_none")]
    pub aml_list: Option<Vec<models::ComplianceScreeningResultFullPayload>>,
    /// Status of compliance result screening.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// The results of the AML address registration.
    #[serde(rename = "amlRegistration", skip_serializing_if = "Option::is_none")]
    pub aml_registration: Option<Vec<models::AmlRegistrationResultFullPayload>>,
}

impl ComplianceResultFullPayload {
    /// The result of the Compliance AML/Travel Rule screening.
    pub fn new() -> ComplianceResultFullPayload {
        ComplianceResultFullPayload {
            aml: None,
            tr: None,
            aml_list: None,
            status: None,
            aml_registration: None,
        }
    }
}
/// Status of compliance result screening.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Started")]
    Started,
    #[serde(rename = "NetworkConnectionAddressResolve")]
    NetworkConnectionAddressResolve,
    #[serde(rename = "ScreeningPrepare")]
    ScreeningPrepare,
    #[serde(rename = "AMLStarted")]
    AmlStarted,
    #[serde(rename = "AMLCompleted")]
    AmlCompleted,
    #[serde(rename = "AMLFailed")]
    AmlFailed,
    #[serde(rename = "AMLInBackground")]
    AmlinBackground,
    #[serde(rename = "TRPreconditionChecks")]
    TrPreconditionChecks,
    #[serde(rename = "TRStarted")]
    TrStarted,
    #[serde(rename = "TRCompleted")]
    TrCompleted,
    #[serde(rename = "TRFailed")]
    TrFailed,
    #[serde(rename = "Completed")]
    Completed,
    #[serde(rename = "IncomingStarted")]
    IncomingStarted,
    #[serde(rename = "IncomingScreeningPrepare")]
    IncomingScreeningPrepare,
    #[serde(rename = "IncomingWaitForFirstConfirmation")]
    IncomingWaitForFirstConfirmation,
    #[serde(rename = "AMLIncomingStarted")]
    AmlIncomingStarted,
    #[serde(rename = "AMLIncomingCompleted")]
    AmlIncomingCompleted,
    #[serde(rename = "AMLIncomingFailed")]
    AmlIncomingFailed,
    #[serde(rename = "AMLIncomingInBackground")]
    AmlIncomingInBackground,
    #[serde(rename = "TRIncomingStarted")]
    TrIncomingStarted,
    #[serde(rename = "TRIncomingCompleted")]
    TrIncomingCompleted,
    #[serde(rename = "TRIncomingFailed")]
    TrIncomingFailed,
    #[serde(rename = "IncomingCompleted")]
    IncomingCompleted,
}

impl Default for Status {
    fn default() -> Status {
        Self::Started
    }
}
