// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TravelRuleValidateGeographicAddress {
    /// Name of a street or thoroughfare
    #[serde(rename = "streetName", skip_serializing_if = "Option::is_none")]
    pub street_name: Option<String>,
    /// Name of a built-up area, with defined boundaries, and a local government
    #[serde(rename = "townName", skip_serializing_if = "Option::is_none")]
    pub town_name: Option<String>,
    /// Nation with its own government (ISO-3166 Alpha-2 country code)
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Number that identifies the position of a building on a street
    #[serde(rename = "buildingNumber", skip_serializing_if = "Option::is_none")]
    pub building_number: Option<String>,
    /// Identifier consisting of a group of letters and/or numbers added to a
    /// postal address to assist the sorting of mail
    #[serde(rename = "postCode", skip_serializing_if = "Option::is_none")]
    pub post_code: Option<String>,
    /// Specifies the type of address. Acceptable values are: - 'HOME':
    /// Residential, the home address - 'BIZZ': Business, the business address -
    /// 'GEOG': Geographic, an unspecified physical (geographical) address
    #[serde(rename = "addressType", skip_serializing_if = "Option::is_none")]
    pub address_type: Option<AddressType>,
    /// Identification of a division of a large organisation or building
    #[serde(rename = "department", skip_serializing_if = "Option::is_none")]
    pub department: Option<String>,
    /// Identification of a sub-division of a large organisation or building
    #[serde(rename = "subDepartment", skip_serializing_if = "Option::is_none")]
    pub sub_department: Option<String>,
    /// Name of the building or house
    #[serde(rename = "buildingName", skip_serializing_if = "Option::is_none")]
    pub building_name: Option<String>,
    /// Floor or storey within a building
    #[serde(rename = "floor", skip_serializing_if = "Option::is_none")]
    pub floor: Option<String>,
    /// Numbered box in a post office
    #[serde(rename = "postBox", skip_serializing_if = "Option::is_none")]
    pub post_box: Option<String>,
    /// Building room number
    #[serde(rename = "room", skip_serializing_if = "Option::is_none")]
    pub room: Option<String>,
    /// Specific location name within the town
    #[serde(rename = "townLocationName", skip_serializing_if = "Option::is_none")]
    pub town_location_name: Option<String>,
    /// Identifies a subdivision within a country subdivision
    #[serde(rename = "districtName", skip_serializing_if = "Option::is_none")]
    pub district_name: Option<String>,
    /// Identifies a subdivision of a country such as state, region, or province
    #[serde(rename = "countrySubDivision", skip_serializing_if = "Option::is_none")]
    pub country_sub_division: Option<String>,
    /// Information that locates and identifies a specific address, presented in
    /// free format text
    #[serde(rename = "addressLine", skip_serializing_if = "Option::is_none")]
    pub address_line: Option<Vec<String>>,
}

impl TravelRuleValidateGeographicAddress {
    pub fn new() -> TravelRuleValidateGeographicAddress {
        TravelRuleValidateGeographicAddress {
            street_name: None,
            town_name: None,
            country: None,
            building_number: None,
            post_code: None,
            address_type: None,
            department: None,
            sub_department: None,
            building_name: None,
            floor: None,
            post_box: None,
            room: None,
            town_location_name: None,
            district_name: None,
            country_sub_division: None,
            address_line: None,
        }
    }
}
/// Specifies the type of address. Acceptable values are: - 'HOME': Residential,
/// the home address - 'BIZZ': Business, the business address - 'GEOG':
/// Geographic, an unspecified physical (geographical) address
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AddressType {
    #[serde(rename = "HOME")]
    Home,
    #[serde(rename = "BIZZ")]
    Bizz,
    #[serde(rename = "GEOG")]
    Geog,
}

impl Default for AddressType {
    fn default() -> AddressType {
        Self::Home
    }
}
