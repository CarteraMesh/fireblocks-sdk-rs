// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    crate::models,
    serde::{Deserialize, Serialize},
};

/// SwapProviderProtocolsEnum : Protocol options supported by each provider.
/// `UNISWAP` supports `UNISWAP_CLASSIC` and `UNISWAPX`. `WRAP_UNWRAP` supports
/// `WRAP` and `UNWRAP.` Protocol options supported by each provider. `UNISWAP`
/// supports `UNISWAP_CLASSIC` and `UNISWAPX`. `WRAP_UNWRAP` supports `WRAP` and
/// `UNWRAP.`
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SwapProviderProtocolsEnum {
    #[serde(rename = "UNISWAP_CLASSIC")]
    UniswapClassic,
    #[serde(rename = "UNISWAPX")]
    Uniswapx,
    #[serde(rename = "WRAP")]
    Wrap,
    #[serde(rename = "UNWRAP")]
    Unwrap,
}

impl std::fmt::Display for SwapProviderProtocolsEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::UniswapClassic => write!(f, "UNISWAP_CLASSIC"),
            Self::Uniswapx => write!(f, "UNISWAPX"),
            Self::Wrap => write!(f, "WRAP"),
            Self::Unwrap => write!(f, "UNWRAP"),
        }
    }
}

impl Default for SwapProviderProtocolsEnum {
    fn default() -> SwapProviderProtocolsEnum {
        Self::UniswapClassic
    }
}
