/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait PaymentsCrossBorderSettlementApi: Send + Sync {
    async fn payments_xb_settlements_configs_config_id_delete(&self,  params: PaymentsXbSettlementsConfigsConfigIdDeleteParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdDeleteError>>;
    async fn payments_xb_settlements_configs_config_id_get(&self,  params: PaymentsXbSettlementsConfigsConfigIdGetParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdGetError>>;
    async fn payments_xb_settlements_configs_config_id_put(&self,  params: PaymentsXbSettlementsConfigsConfigIdPutParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdPutError>>;
    async fn payments_xb_settlements_configs_get(&self, ) -> Result<models::XbSettlementGetAllConfigsResponse, Error<PaymentsXbSettlementsConfigsGetError>>;
    async fn payments_xb_settlements_configs_post(&self,  params: PaymentsXbSettlementsConfigsPostParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsPostError>>;
    async fn payments_xb_settlements_flows_flow_id_actions_execute_post(&self,  params: PaymentsXbSettlementsFlowsFlowIdActionsExecutePostParams ) -> Result<models::XbSettlementFlowExecutionModel, Error<PaymentsXbSettlementsFlowsFlowIdActionsExecutePostError>>;
    async fn payments_xb_settlements_flows_flow_id_get(&self,  params: PaymentsXbSettlementsFlowsFlowIdGetParams ) -> Result<models::XbSettlementGetFlowResponse, Error<PaymentsXbSettlementsFlowsFlowIdGetError>>;
    async fn payments_xb_settlements_flows_post(&self,  params: PaymentsXbSettlementsFlowsPostParams ) -> Result<models::XbSettlementFlowPreviewModel, Error<PaymentsXbSettlementsFlowsPostError>>;
}

pub struct PaymentsCrossBorderSettlementApiClient {
    configuration: Arc<configuration::Configuration>
}

impl PaymentsCrossBorderSettlementApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`payments_xb_settlements_configs_config_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsConfigsConfigIdDeleteParams {
    /// The cross-border settlement configuration ID.
    pub config_id: String
}

/// struct for passing parameters to the method [`payments_xb_settlements_configs_config_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsConfigsConfigIdGetParams {
    /// The cross-border settlement configuration ID.
    pub config_id: String
}

/// struct for passing parameters to the method [`payments_xb_settlements_configs_config_id_put`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsConfigsConfigIdPutParams {
    /// The cross-border settlement configuration ID.
    pub config_id: String,
    pub xb_settlement_config_edit_request_body: Option<models::XbSettlementConfigEditRequestBody>
}

/// struct for passing parameters to the method [`payments_xb_settlements_configs_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsConfigsPostParams {
    pub xb_settlement_config_creation_request_body: Option<models::XbSettlementConfigCreationRequestBody>
}

/// struct for passing parameters to the method [`payments_xb_settlements_flows_flow_id_actions_execute_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsFlowsFlowIdActionsExecutePostParams {
    /// The cross-border settlement flow ID.
    pub flow_id: String,
    pub xb_settlement_flow_execution_request_body: Option<models::XbSettlementFlowExecutionRequestBody>
}

/// struct for passing parameters to the method [`payments_xb_settlements_flows_flow_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsFlowsFlowIdGetParams {
    /// The cross-border settlement flow ID.
    pub flow_id: String
}

/// struct for passing parameters to the method [`payments_xb_settlements_flows_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct PaymentsXbSettlementsFlowsPostParams {
    pub xb_settlement_create_flow_request_body: Option<models::XbSettlementCreateFlowRequestBody>
}


#[async_trait]
impl PaymentsCrossBorderSettlementApi for PaymentsCrossBorderSettlementApiClient {
    /// Delete a cross-border settlement configuration. This does not delete or remove previously executed flows that used this configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_configs_config_id_delete(&self,  params: PaymentsXbSettlementsConfigsConfigIdDeleteParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdDeleteError>> {
        
        let PaymentsXbSettlementsConfigsConfigIdDeleteParams {
            config_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/configs/{configId}", local_var_configuration.base_path, configId=crate::apis::urlencode(config_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsConfigsConfigIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get a specific cross-border settlement configuration.</br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_configs_config_id_get(&self,  params: PaymentsXbSettlementsConfigsConfigIdGetParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdGetError>> {
        
        let PaymentsXbSettlementsConfigsConfigIdGetParams {
            config_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/configs/{configId}", local_var_configuration.base_path, configId=crate::apis::urlencode(config_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsConfigsConfigIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Edit a cross-border settlement configuration. Editing a configuration does not affect previously executed flows that used the configuration. **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_configs_config_id_put(&self,  params: PaymentsXbSettlementsConfigsConfigIdPutParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsConfigIdPutError>> {
        
        let PaymentsXbSettlementsConfigsConfigIdPutParams {
            config_id,
            xb_settlement_config_edit_request_body,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/configs/{configId}", local_var_configuration.base_path, configId=crate::apis::urlencode(config_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&xb_settlement_config_edit_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsConfigsConfigIdPutError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get all the cross-border settlement configurations. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_configs_get(&self, ) -> Result<models::XbSettlementGetAllConfigsResponse, Error<PaymentsXbSettlementsConfigsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/configs", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsConfigsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// <u><b>Create a new cross-border settlement configuration. </u></b></br>Configurations define the default assets, on-ramps, and off-ramps to use for the cross-border settlement. </br>  A configuration must contain at least two steps - `ON_RAMP` and `VAULT_ACCOUNT`. </br> All other steps (e.g., `OFF_RAMP`, `FIAT_DESTINATION`, etc.) are optional. </br> Every step must include the `accountId` to be used, while `inputAssetId` and `outputAssetId` are optional.  If those are not provided, a default value will be used from the Corridor Settings.</br> If the inputAssetId or the outputAssetId is provided for one of the objects, all assets in the objects must be consistent. For example, if the output asset of ON_RAMP is XLM_USDC_5F3T, then the input asset of the VAULT_ACCOUNT must also be XLM_USDC_5F3T..</br> You can set a slippage amount for your configuration. Slippage is defined by basis points (bps). This value can be overloaded on execution. If you do not configure a slippage amount, the default slippage of 10000 bps (10%) is used. </br> **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_configs_post(&self,  params: PaymentsXbSettlementsConfigsPostParams ) -> Result<models::XbSettlementConfigModel, Error<PaymentsXbSettlementsConfigsPostError>> {
        
        let PaymentsXbSettlementsConfigsPostParams {
            xb_settlement_config_creation_request_body,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/configs", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&xb_settlement_config_creation_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsConfigsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Send a payment flow with 'flowId' for execution. If a differet slippage configuraion is needed for this execution than configured in the flow configuration, the request body must define the desired slippage configuration for this execution.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_flows_flow_id_actions_execute_post(&self,  params: PaymentsXbSettlementsFlowsFlowIdActionsExecutePostParams ) -> Result<models::XbSettlementFlowExecutionModel, Error<PaymentsXbSettlementsFlowsFlowIdActionsExecutePostError>> {
        
        let PaymentsXbSettlementsFlowsFlowIdActionsExecutePostParams {
            flow_id,
            xb_settlement_flow_execution_request_body,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/flows/{flowId}/actions/execute", local_var_configuration.base_path, flowId=crate::apis::urlencode(flow_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&xb_settlement_flow_execution_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsFlowsFlowIdActionsExecutePostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Gets details for a specific cross-border settlement flow **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_flows_flow_id_get(&self,  params: PaymentsXbSettlementsFlowsFlowIdGetParams ) -> Result<models::XbSettlementGetFlowResponse, Error<PaymentsXbSettlementsFlowsFlowIdGetError>> {
        
        let PaymentsXbSettlementsFlowsFlowIdGetParams {
            flow_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/flows/{flowId}", local_var_configuration.base_path, flowId=crate::apis::urlencode(flow_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsFlowsFlowIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Create a cross-border flow (based on a cross-border configuration) with an amount to transfer.  The assetId is defined by the cross-border configuration. Creating a flow triggers a calculation of the flow estimations, including FX rates, times, and fees based on the amount provided. Creating a cross-border flow will not execute the flow.  **Note:** The reference content in this section documents the Payments Engine endpoint. The Payments Engine endpoint includes APIs available only for customers with the Payments Engine enabled on their accounts. These endpoints are currently in beta and might be subject to changes. If you want to learn more about the Fireblocks Payments Engine, please contact your Fireblocks Customer Success Manager or send an email to CSM@fireblocks.com. 
    async fn payments_xb_settlements_flows_post(&self,  params: PaymentsXbSettlementsFlowsPostParams ) -> Result<models::XbSettlementFlowPreviewModel, Error<PaymentsXbSettlementsFlowsPostError>> {
        
        let PaymentsXbSettlementsFlowsPostParams {
            xb_settlement_create_flow_request_body,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/payments/xb-settlements/flows", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&xb_settlement_create_flow_request_body);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<PaymentsXbSettlementsFlowsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`payments_xb_settlements_configs_config_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsConfigsConfigIdDeleteError {
    Status404(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_configs_config_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsConfigsConfigIdGetError {
    Status404(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_configs_config_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsConfigsConfigIdPutError {
    Status404(models::ErrorResponse),
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_configs_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsConfigsGetError {
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_configs_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsConfigsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_flows_flow_id_actions_execute_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsFlowsFlowIdActionsExecutePostError {
    Status400(models::ErrorResponse),
    Status404(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_flows_flow_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsFlowsFlowIdGetError {
    Status404(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`payments_xb_settlements_flows_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PaymentsXbSettlementsFlowsPostError {
    Status400(models::ErrorResponse),
    Status401(models::ErrorResponse),
    Status5XX(models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

