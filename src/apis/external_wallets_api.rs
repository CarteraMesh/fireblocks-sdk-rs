/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait ExternalWalletsApi: Send + Sync {
    async fn external_wallets_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<ExternalWalletsGetError>>;
    async fn external_wallets_post(&self,  params: ExternalWalletsPostParams ) -> Result<models::UnmanagedWallet, Error<ExternalWalletsPostError>>;
    async fn external_wallets_wallet_id_asset_id_delete(&self,  params: ExternalWalletsWalletIdAssetIdDeleteParams ) -> Result<(), Error<ExternalWalletsWalletIdAssetIdDeleteError>>;
    async fn external_wallets_wallet_id_asset_id_get(&self,  params: ExternalWalletsWalletIdAssetIdGetParams ) -> Result<models::ExternalWalletAsset, Error<ExternalWalletsWalletIdAssetIdGetError>>;
    async fn external_wallets_wallet_id_asset_id_post(&self,  params: ExternalWalletsWalletIdAssetIdPostParams ) -> Result<models::ExternalWalletAsset, Error<ExternalWalletsWalletIdAssetIdPostError>>;
    async fn external_wallets_wallet_id_delete(&self,  params: ExternalWalletsWalletIdDeleteParams ) -> Result<(), Error<ExternalWalletsWalletIdDeleteError>>;
    async fn external_wallets_wallet_id_get(&self,  params: ExternalWalletsWalletIdGetParams ) -> Result<models::UnmanagedWallet, Error<ExternalWalletsWalletIdGetError>>;
    async fn external_wallets_wallet_id_set_customer_ref_id_post(&self,  params: ExternalWalletsWalletIdSetCustomerRefIdPostParams ) -> Result<(), Error<ExternalWalletsWalletIdSetCustomerRefIdPostError>>;
}

pub struct ExternalWalletsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ExternalWalletsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`external_wallets_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsPostParams {
    pub internal_wallets_post_request: Option<models::InternalWalletsPostRequest>
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_asset_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdAssetIdDeleteParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to delete
    pub asset_id: String
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_asset_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdAssetIdGetParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to return
    pub asset_id: String
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_asset_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdAssetIdPostParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to add
    pub asset_id: String,
    pub external_wallets_wallet_id_asset_id_post_request: Option<models::ExternalWalletsWalletIdAssetIdPostRequest>
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdDeleteParams {
    /// The ID of the wallet to delete
    pub wallet_id: String
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdGetParams {
    /// The ID of the wallet to return
    pub wallet_id: String
}

/// struct for passing parameters to the method [`external_wallets_wallet_id_set_customer_ref_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExternalWalletsWalletIdSetCustomerRefIdPostParams {
    /// The wallet ID
    pub wallet_id: String,
    pub vault_accounts_vault_account_id_set_customer_ref_id_post_request: models::VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest
}


#[async_trait]
impl ExternalWalletsApi for ExternalWalletsApiClient {
    /// Gets a list of external wallets under the workspace.
    async fn external_wallets_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<ExternalWalletsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExternalWalletsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Creates a new external wallet with the requested name.
    async fn external_wallets_post(&self,  params: ExternalWalletsPostParams ) -> Result<models::UnmanagedWallet, Error<ExternalWalletsPostError>> {
        
        let ExternalWalletsPostParams {
            internal_wallets_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&internal_wallets_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExternalWalletsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Deletes an external wallet asset by ID.
    async fn external_wallets_wallet_id_asset_id_delete(&self,  params: ExternalWalletsWalletIdAssetIdDeleteParams ) -> Result<(), Error<ExternalWalletsWalletIdAssetIdDeleteError>> {
        
        let ExternalWalletsWalletIdAssetIdDeleteParams {
            wallet_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdAssetIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns an external wallet by wallet ID and asset ID.
    async fn external_wallets_wallet_id_asset_id_get(&self,  params: ExternalWalletsWalletIdAssetIdGetParams ) -> Result<models::ExternalWalletAsset, Error<ExternalWalletsWalletIdAssetIdGetError>> {
        
        let ExternalWalletsWalletIdAssetIdGetParams {
            wallet_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdAssetIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Adds an asset to an existing external wallet.
    async fn external_wallets_wallet_id_asset_id_post(&self,  params: ExternalWalletsWalletIdAssetIdPostParams ) -> Result<models::ExternalWalletAsset, Error<ExternalWalletsWalletIdAssetIdPostError>> {
        
        let ExternalWalletsWalletIdAssetIdPostParams {
            wallet_id,
            asset_id,
            external_wallets_wallet_id_asset_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&external_wallets_wallet_id_asset_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdAssetIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Deletes an external wallet by ID.
    async fn external_wallets_wallet_id_delete(&self,  params: ExternalWalletsWalletIdDeleteParams ) -> Result<(), Error<ExternalWalletsWalletIdDeleteError>> {
        
        let ExternalWalletsWalletIdDeleteParams {
            wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns an external wallet by ID.
    async fn external_wallets_wallet_id_get(&self,  params: ExternalWalletsWalletIdGetParams ) -> Result<models::UnmanagedWallet, Error<ExternalWalletsWalletIdGetError>> {
        
        let ExternalWalletsWalletIdGetParams {
            wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Sets an AML/KYT customer reference ID for the specific external wallet.
    async fn external_wallets_wallet_id_set_customer_ref_id_post(&self,  params: ExternalWalletsWalletIdSetCustomerRefIdPostParams ) -> Result<(), Error<ExternalWalletsWalletIdSetCustomerRefIdPostError>> {
        
        let ExternalWalletsWalletIdSetCustomerRefIdPostParams {
            wallet_id,
            vault_accounts_vault_account_id_set_customer_ref_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/external_wallets/{walletId}/set_customer_ref_id", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&vault_accounts_vault_account_id_set_customer_ref_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ExternalWalletsWalletIdSetCustomerRefIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`external_wallets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_asset_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdAssetIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_asset_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdAssetIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_asset_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdAssetIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`external_wallets_wallet_id_set_customer_ref_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExternalWalletsWalletIdSetCustomerRefIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

