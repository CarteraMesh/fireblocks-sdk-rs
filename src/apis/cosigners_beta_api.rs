// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{apis::ResponseContent, models},
    async_trait::async_trait,
    reqwest,
    serde::{Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait CosignersBetaApi: Send + Sync {
    async fn get_api_key(
        &self,
        params: GetApiKeyParams,
    ) -> Result<models::ApiKey, Error<GetApiKeyError>>;
    async fn get_api_keys(
        &self,
        params: GetApiKeysParams,
    ) -> Result<models::ApiKeysPaginatedResponse, Error<GetApiKeysError>>;
    async fn get_cosigner(
        &self,
        params: GetCosignerParams,
    ) -> Result<models::Cosigner, Error<GetCosignerError>>;
    async fn get_cosigners(
        &self,
        params: GetCosignersParams,
    ) -> Result<models::CosignersPaginatedResponse, Error<GetCosignersError>>;
    async fn rename_cosigner(
        &self,
        params: RenameCosignerParams,
    ) -> Result<models::Cosigner, Error<RenameCosignerError>>;
}

pub struct CosignersBetaApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl CosignersBetaApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`get_api_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetApiKeyParams {
    /// The unique identifier of the cosigner
    pub cosigner_id: String,
    /// The unique identifier of the API key
    pub api_key_id: String,
}

/// struct for passing parameters to the method [`get_api_keys`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetApiKeysParams {
    /// The unique identifier of the cosigner
    pub cosigner_id: String,
    /// ASC / DESC ordering (default DESC)
    pub order: Option<String>,
    /// Cursor of the required page
    pub page_cursor: Option<String>,
    /// Maximum number of items in the page
    pub page_size: Option<f64>,
}

/// struct for passing parameters to the method [`get_cosigner`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCosignerParams {
    /// The unique identifier of the cosigner
    pub cosigner_id: String,
}

/// struct for passing parameters to the method [`get_cosigners`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCosignersParams {
    /// ASC / DESC ordering (default DESC)
    pub order: Option<String>,
    /// Cursor of the required page
    pub page_cursor: Option<String>,
    /// Maximum number of items in the page
    pub page_size: Option<f64>,
}

/// struct for passing parameters to the method [`rename_cosigner`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct RenameCosignerParams {
    /// The unique identifier of the cosigner
    pub cosigner_id: String,
    pub rename_cosigner: models::RenameCosigner,
}

#[async_trait]
impl CosignersBetaApi for CosignersBetaApiClient {
    /// Get an API key by ID **Note:** These endpoints are currently in beta and
    /// might be subject to changes.
    async fn get_api_key(
        &self,
        params: GetApiKeyParams,
    ) -> Result<models::ApiKey, Error<GetApiKeyError>> {
        let GetApiKeyParams {
            cosigner_id,
            api_key_id,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/cosigners/{cosignerId}/api_keys/{apiKeyId}",
            local_var_configuration.base_path,
            cosignerId = crate::apis::urlencode(cosigner_id),
            apiKeyId = crate::apis::urlencode(api_key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetApiKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get all cosigner paired API keys (paginated) **Note:** These endpoints
    /// are currently in beta and might be subject to changes.
    async fn get_api_keys(
        &self,
        params: GetApiKeysParams,
    ) -> Result<models::ApiKeysPaginatedResponse, Error<GetApiKeysError>> {
        let GetApiKeysParams {
            cosigner_id,
            order,
            page_cursor,
            page_size,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/cosigners/{cosignerId}/api_keys",
            local_var_configuration.base_path,
            cosignerId = crate::apis::urlencode(cosigner_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetApiKeysError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get a cosigner by ID **Note:** These endpoints are currently in beta and
    /// might be subject to changes.
    async fn get_cosigner(
        &self,
        params: GetCosignerParams,
    ) -> Result<models::Cosigner, Error<GetCosignerError>> {
        let GetCosignerParams { cosigner_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/cosigners/{cosignerId}",
            local_var_configuration.base_path,
            cosignerId = crate::apis::urlencode(cosigner_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetCosignerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get all workspace cosigners (paginated) **Note:** These endpoints are
    /// currently in beta and might be subject to changes.
    async fn get_cosigners(
        &self,
        params: GetCosignersParams,
    ) -> Result<models::CosignersPaginatedResponse, Error<GetCosignersError>> {
        let GetCosignersParams {
            order,
            page_cursor,
            page_size,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/cosigners", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetCosignersError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Rename a cosigner by ID **Note:** These endpoints are currently in beta
    /// and might be subject to changes.
    async fn rename_cosigner(
        &self,
        params: RenameCosignerParams,
    ) -> Result<models::Cosigner, Error<RenameCosignerError>> {
        let RenameCosignerParams {
            cosigner_id,
            rename_cosigner,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/cosigners/{cosignerId}",
            local_var_configuration.base_path,
            cosignerId = crate::apis::urlencode(cosigner_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&rename_cosigner);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<RenameCosignerError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`get_api_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_api_keys`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetApiKeysError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cosigner`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCosignerError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_cosigners`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCosignersError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`rename_cosigner`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RenameCosignerError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}
