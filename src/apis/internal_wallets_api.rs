/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait InternalWalletsApi: Send + Sync {
    async fn internal_wallets_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<InternalWalletsGetError>>;
    async fn internal_wallets_post(&self,  params: InternalWalletsPostParams ) -> Result<models::UnmanagedWallet, Error<InternalWalletsPostError>>;
    async fn internal_wallets_wallet_id_asset_id_delete(&self,  params: InternalWalletsWalletIdAssetIdDeleteParams ) -> Result<(), Error<InternalWalletsWalletIdAssetIdDeleteError>>;
    async fn internal_wallets_wallet_id_asset_id_get(&self,  params: InternalWalletsWalletIdAssetIdGetParams ) -> Result<models::WalletAsset, Error<InternalWalletsWalletIdAssetIdGetError>>;
    async fn internal_wallets_wallet_id_asset_id_post(&self,  params: InternalWalletsWalletIdAssetIdPostParams ) -> Result<models::WalletAsset, Error<InternalWalletsWalletIdAssetIdPostError>>;
    async fn internal_wallets_wallet_id_delete(&self,  params: InternalWalletsWalletIdDeleteParams ) -> Result<(), Error<InternalWalletsWalletIdDeleteError>>;
    async fn internal_wallets_wallet_id_get(&self,  params: InternalWalletsWalletIdGetParams ) -> Result<models::UnmanagedWallet, Error<InternalWalletsWalletIdGetError>>;
    async fn internal_wallets_wallet_id_set_customer_ref_id_post(&self,  params: InternalWalletsWalletIdSetCustomerRefIdPostParams ) -> Result<(), Error<InternalWalletsWalletIdSetCustomerRefIdPostError>>;
}

pub struct InternalWalletsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl InternalWalletsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`internal_wallets_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsPostParams {
    pub internal_wallets_post_request: Option<models::InternalWalletsPostRequest>
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_asset_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdAssetIdDeleteParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to delete
    pub asset_id: String
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_asset_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdAssetIdGetParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to return
    pub asset_id: String
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_asset_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdAssetIdPostParams {
    /// The ID of the wallet
    pub wallet_id: String,
    /// The ID of the asset to add
    pub asset_id: String,
    pub internal_wallets_wallet_id_asset_id_post_request: Option<models::InternalWalletsWalletIdAssetIdPostRequest>
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdDeleteParams {
    /// The ID of the wallet to delete
    pub wallet_id: String
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdGetParams {
    /// The ID of the wallet to return
    pub wallet_id: String
}

/// struct for passing parameters to the method [`internal_wallets_wallet_id_set_customer_ref_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct InternalWalletsWalletIdSetCustomerRefIdPostParams {
    /// The wallet ID
    pub wallet_id: String,
    pub vault_accounts_vault_account_id_set_customer_ref_id_post_request: models::VaultAccountsVaultAccountIdSetCustomerRefIdPostRequest
}


#[async_trait]
impl InternalWalletsApi for InternalWalletsApiClient {
    /// Gets a list of internal wallets.  **Note**: BTC-based assets belonging to whitelisted addresses cannot be retrieved between 00:00 UTC and 00:01 UTC daily due to third-party provider, Blockchair, being unavailable for this 60 second period. Please wait until the next minute to retrieve BTC-based assets. 
    async fn internal_wallets_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<InternalWalletsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<InternalWalletsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Creates a new internal wallet with the requested name.
    async fn internal_wallets_post(&self,  params: InternalWalletsPostParams ) -> Result<models::UnmanagedWallet, Error<InternalWalletsPostError>> {
        
        let InternalWalletsPostParams {
            internal_wallets_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&internal_wallets_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<InternalWalletsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Deletes a whitelisted address (for an asset) from an internal wallet.
    async fn internal_wallets_wallet_id_asset_id_delete(&self,  params: InternalWalletsWalletIdAssetIdDeleteParams ) -> Result<(), Error<InternalWalletsWalletIdAssetIdDeleteError>> {
        
        let InternalWalletsWalletIdAssetIdDeleteParams {
            wallet_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdAssetIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns information for an asset in an internal wallet.
    async fn internal_wallets_wallet_id_asset_id_get(&self,  params: InternalWalletsWalletIdAssetIdGetParams ) -> Result<models::WalletAsset, Error<InternalWalletsWalletIdAssetIdGetError>> {
        
        let InternalWalletsWalletIdAssetIdGetParams {
            wallet_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdAssetIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Adds an asset to an existing internal wallet.
    async fn internal_wallets_wallet_id_asset_id_post(&self,  params: InternalWalletsWalletIdAssetIdPostParams ) -> Result<models::WalletAsset, Error<InternalWalletsWalletIdAssetIdPostError>> {
        
        let InternalWalletsWalletIdAssetIdPostParams {
            wallet_id,
            asset_id,
            internal_wallets_wallet_id_asset_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}/{assetId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&internal_wallets_wallet_id_asset_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdAssetIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Deletes an internal wallet by ID.
    async fn internal_wallets_wallet_id_delete(&self,  params: InternalWalletsWalletIdDeleteParams ) -> Result<(), Error<InternalWalletsWalletIdDeleteError>> {
        
        let InternalWalletsWalletIdDeleteParams {
            wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns all assets in an internal wallet by ID.
    async fn internal_wallets_wallet_id_get(&self,  params: InternalWalletsWalletIdGetParams ) -> Result<models::UnmanagedWallet, Error<InternalWalletsWalletIdGetError>> {
        
        let InternalWalletsWalletIdGetParams {
            wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Sets an AML/KYT customer reference ID for the specific internal wallet.
    async fn internal_wallets_wallet_id_set_customer_ref_id_post(&self,  params: InternalWalletsWalletIdSetCustomerRefIdPostParams ) -> Result<(), Error<InternalWalletsWalletIdSetCustomerRefIdPostError>> {
        
        let InternalWalletsWalletIdSetCustomerRefIdPostParams {
            wallet_id,
            vault_accounts_vault_account_id_set_customer_ref_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/internal_wallets/{walletId}/set_customer_ref_id", local_var_configuration.base_path, walletId=crate::apis::urlencode(wallet_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&vault_accounts_vault_account_id_set_customer_ref_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<InternalWalletsWalletIdSetCustomerRefIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`internal_wallets_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_asset_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdAssetIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_asset_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdAssetIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_asset_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdAssetIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`internal_wallets_wallet_id_set_customer_ref_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum InternalWalletsWalletIdSetCustomerRefIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

