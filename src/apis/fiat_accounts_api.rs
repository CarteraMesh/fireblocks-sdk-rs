/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait FiatAccountsApi: Send + Sync {
    async fn fiat_accounts_account_id_deposit_from_linked_dda_post(&self,  params: FiatAccountsAccountIdDepositFromLinkedDdaPostParams ) -> Result<(), Error<FiatAccountsAccountIdDepositFromLinkedDdaPostError>>;
    async fn fiat_accounts_account_id_get(&self,  params: FiatAccountsAccountIdGetParams ) -> Result<models::FiatAccount, Error<FiatAccountsAccountIdGetError>>;
    async fn fiat_accounts_account_id_redeem_to_linked_dda_post(&self,  params: FiatAccountsAccountIdRedeemToLinkedDdaPostParams ) -> Result<(), Error<FiatAccountsAccountIdRedeemToLinkedDdaPostError>>;
    async fn fiat_accounts_get(&self, ) -> Result<Vec<models::FiatAccount>, Error<FiatAccountsGetError>>;
}

pub struct FiatAccountsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl FiatAccountsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`fiat_accounts_account_id_deposit_from_linked_dda_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct FiatAccountsAccountIdDepositFromLinkedDdaPostParams {
    /// The ID of the fiat account to use
    pub account_id: String,
    pub fiat_accounts_account_id_redeem_to_linked_dda_post_request: Option<models::FiatAccountsAccountIdRedeemToLinkedDdaPostRequest>
}

/// struct for passing parameters to the method [`fiat_accounts_account_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct FiatAccountsAccountIdGetParams {
    /// The ID of the fiat account to return
    pub account_id: String
}

/// struct for passing parameters to the method [`fiat_accounts_account_id_redeem_to_linked_dda_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct FiatAccountsAccountIdRedeemToLinkedDdaPostParams {
    /// The ID of the fiat account to use
    pub account_id: String,
    pub fiat_accounts_account_id_redeem_to_linked_dda_post_request: Option<models::FiatAccountsAccountIdRedeemToLinkedDdaPostRequest>
}


#[async_trait]
impl FiatAccountsApi for FiatAccountsApiClient {
    /// Deposits funds from the linked DDA.
    async fn fiat_accounts_account_id_deposit_from_linked_dda_post(&self,  params: FiatAccountsAccountIdDepositFromLinkedDdaPostParams ) -> Result<(), Error<FiatAccountsAccountIdDepositFromLinkedDdaPostError>> {
        
        let FiatAccountsAccountIdDepositFromLinkedDdaPostParams {
            account_id,
            fiat_accounts_account_id_redeem_to_linked_dda_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/fiat_accounts/{accountId}/deposit_from_linked_dda", local_var_configuration.base_path, accountId=crate::apis::urlencode(account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&fiat_accounts_account_id_redeem_to_linked_dda_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<FiatAccountsAccountIdDepositFromLinkedDdaPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a fiat account by ID.
    async fn fiat_accounts_account_id_get(&self,  params: FiatAccountsAccountIdGetParams ) -> Result<models::FiatAccount, Error<FiatAccountsAccountIdGetError>> {
        
        let FiatAccountsAccountIdGetParams {
            account_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/fiat_accounts/{accountId}", local_var_configuration.base_path, accountId=crate::apis::urlencode(account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<FiatAccountsAccountIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Redeems funds to the linked DDA.
    async fn fiat_accounts_account_id_redeem_to_linked_dda_post(&self,  params: FiatAccountsAccountIdRedeemToLinkedDdaPostParams ) -> Result<(), Error<FiatAccountsAccountIdRedeemToLinkedDdaPostError>> {
        
        let FiatAccountsAccountIdRedeemToLinkedDdaPostParams {
            account_id,
            fiat_accounts_account_id_redeem_to_linked_dda_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/fiat_accounts/{accountId}/redeem_to_linked_dda", local_var_configuration.base_path, accountId=crate::apis::urlencode(account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&fiat_accounts_account_id_redeem_to_linked_dda_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<FiatAccountsAccountIdRedeemToLinkedDdaPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns all fiat accounts.
    async fn fiat_accounts_get(&self, ) -> Result<Vec<models::FiatAccount>, Error<FiatAccountsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/fiat_accounts", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<FiatAccountsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`fiat_accounts_account_id_deposit_from_linked_dda_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FiatAccountsAccountIdDepositFromLinkedDdaPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fiat_accounts_account_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FiatAccountsAccountIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fiat_accounts_account_id_redeem_to_linked_dda_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FiatAccountsAccountIdRedeemToLinkedDdaPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fiat_accounts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FiatAccountsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

