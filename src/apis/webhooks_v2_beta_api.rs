// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{apis::ResponseContent, models},
    async_trait::async_trait,
    reqwest,
    serde::{Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait WebhooksV2BetaApi: Send + Sync {
    async fn create_webhook(
        &self,
        params: CreateWebhookParams,
    ) -> Result<models::Webhook, Error<CreateWebhookError>>;
    async fn delete_webhook(
        &self,
        params: DeleteWebhookParams,
    ) -> Result<models::Webhook, Error<DeleteWebhookError>>;
    async fn get_notification(
        &self,
        params: GetNotificationParams,
    ) -> Result<models::NotificationWithData, Error<GetNotificationError>>;
    async fn get_notifications(
        &self,
        params: GetNotificationsParams,
    ) -> Result<models::NotificationPaginatedResponse, Error<GetNotificationsError>>;
    async fn get_webhook(
        &self,
        params: GetWebhookParams,
    ) -> Result<models::Webhook, Error<GetWebhookError>>;
    async fn get_webhooks(
        &self,
        params: GetWebhooksParams,
    ) -> Result<models::WebhookPaginatedResponse, Error<GetWebhooksError>>;
    async fn update_webhook(
        &self,
        params: UpdateWebhookParams,
    ) -> Result<models::Webhook, Error<UpdateWebhookError>>;
}

pub struct WebhooksV2BetaApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl WebhooksV2BetaApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`create_webhook`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateWebhookParams {
    pub create_webhook_request: models::CreateWebhookRequest,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`delete_webhook`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DeleteWebhookParams {
    /// The unique identifier of the webhook
    pub webhook_id: String,
}

/// struct for passing parameters to the method [`get_notification`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetNotificationParams {
    /// The ID of the webhook to fetch
    pub webhook_id: String,
    /// The ID of the notification to fetch
    pub notification_id: String,
    /// Include the data of the notification
    pub include_data: Option<bool>,
}

/// struct for passing parameters to the method [`get_notifications`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetNotificationsParams {
    pub webhook_id: String,
    /// ASC / DESC ordering (default DESC)
    pub order: Option<String>,
    /// Cursor of the required page
    pub page_cursor: Option<String>,
    /// Maximum number of items in the page
    pub page_size: Option<f64>,
    /// sort by start date
    pub created_start_date: Option<String>,
    /// sort by end date
    pub created_end_date: Option<String>,
    /// Filter by Notification statues
    pub statuses: Option<Vec<models::NotificationStatus>>,
    /// Filter by Notification eventTypes
    pub event_types: Option<Vec<models::WebhookEvent>>,
    /// Filter by resourceId
    pub resource_id: Option<String>,
}

/// struct for passing parameters to the method [`get_webhook`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetWebhookParams {
    /// The unique identifier of the webhook
    pub webhook_id: String,
}

/// struct for passing parameters to the method [`get_webhooks`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetWebhooksParams {
    /// ASC / DESC ordering (default DESC)
    pub order: Option<String>,
    /// Cursor of the required page
    pub page_cursor: Option<String>,
    /// Maximum number of items in the page
    pub page_size: Option<f64>,
}

/// struct for passing parameters to the method [`update_webhook`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UpdateWebhookParams {
    /// The unique identifier of the webhook
    pub webhook_id: String,
    pub update_webhook_request: models::UpdateWebhookRequest,
}

#[async_trait]
impl WebhooksV2BetaApi for WebhooksV2BetaApiClient {
    /// Creates a new webhook, which will be triggered on the specified events
    /// **Note:** These endpoints are currently in beta and might be subject to
    /// changes.
    async fn create_webhook(
        &self,
        params: CreateWebhookParams,
    ) -> Result<models::Webhook, Error<CreateWebhookError>> {
        let CreateWebhookParams {
            create_webhook_request,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/webhooks", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&create_webhook_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<CreateWebhookError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Delete a webhook by its id **Note:** These endpoints are currently in
    /// beta and might be subject to changes.
    async fn delete_webhook(
        &self,
        params: DeleteWebhookParams,
    ) -> Result<models::Webhook, Error<DeleteWebhookError>> {
        let DeleteWebhookParams { webhook_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/webhooks/{webhookId}",
            local_var_configuration.base_path,
            webhookId = crate::apis::urlencode(webhook_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<DeleteWebhookError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get notification by id **Note:** These endpoints are currently in beta
    /// and might be subject to changes.
    async fn get_notification(
        &self,
        params: GetNotificationParams,
    ) -> Result<models::NotificationWithData, Error<GetNotificationError>> {
        let GetNotificationParams {
            webhook_id,
            notification_id,
            include_data,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/webhooks/{webhookId}/notifications/{notificationId}",
            local_var_configuration.base_path,
            webhookId = crate::apis::urlencode(webhook_id),
            notificationId = crate::apis::urlencode(notification_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = include_data {
            local_var_req_builder =
                local_var_req_builder.query(&[("includeData", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetNotificationError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get all notifications by webhook id (paginated) **Note:** These
    /// endpoints are currently in beta and might be subject to changes.
    async fn get_notifications(
        &self,
        params: GetNotificationsParams,
    ) -> Result<models::NotificationPaginatedResponse, Error<GetNotificationsError>> {
        let GetNotificationsParams {
            webhook_id,
            order,
            page_cursor,
            page_size,
            created_start_date,
            created_end_date,
            statuses,
            event_types,
            resource_id,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/webhooks/{webhookId}/notifications",
            local_var_configuration.base_path,
            webhookId = crate::apis::urlencode(webhook_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = created_start_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("createdStartDate", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = created_end_date {
            local_var_req_builder =
                local_var_req_builder.query(&[("createdEndDate", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = statuses {
            local_var_req_builder = match "multi" {
                "multi" => local_var_req_builder.query(
                    &local_var_str
                        .into_iter()
                        .map(|p| ("statuses".to_owned(), p.to_string()))
                        .collect::<Vec<(std::string::String, std::string::String)>>(),
                ),
                _ => local_var_req_builder.query(&[(
                    "statuses",
                    &local_var_str
                        .into_iter()
                        .map(|p| p.to_string())
                        .collect::<Vec<String>>()
                        .join(",")
                        .to_string(),
                )]),
            };
        }
        if let Some(ref local_var_str) = event_types {
            local_var_req_builder = match "multi" {
                "multi" => local_var_req_builder.query(
                    &local_var_str
                        .into_iter()
                        .map(|p| ("eventTypes".to_owned(), p.to_string()))
                        .collect::<Vec<(std::string::String, std::string::String)>>(),
                ),
                _ => local_var_req_builder.query(&[(
                    "eventTypes",
                    &local_var_str
                        .into_iter()
                        .map(|p| p.to_string())
                        .collect::<Vec<String>>()
                        .join(",")
                        .to_string(),
                )]),
            };
        }
        if let Some(ref local_var_str) = resource_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("resourceId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetNotificationsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Retrieve a webhook by its id **Note:** These endpoints are currently in
    /// beta and might be subject to changes.
    async fn get_webhook(
        &self,
        params: GetWebhookParams,
    ) -> Result<models::Webhook, Error<GetWebhookError>> {
        let GetWebhookParams { webhook_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/webhooks/{webhookId}",
            local_var_configuration.base_path,
            webhookId = crate::apis::urlencode(webhook_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetWebhookError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get all webhooks (paginated) **Note:** These endpoints are currently in
    /// beta and might be subject to changes.
    async fn get_webhooks(
        &self,
        params: GetWebhooksParams,
    ) -> Result<models::WebhookPaginatedResponse, Error<GetWebhooksError>> {
        let GetWebhooksParams {
            order,
            page_cursor,
            page_size,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/webhooks", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetWebhooksError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Update a webhook by its id **Note:** These endpoints are currently in
    /// beta and might be subject to changes.
    async fn update_webhook(
        &self,
        params: UpdateWebhookParams,
    ) -> Result<models::Webhook, Error<UpdateWebhookError>> {
        let UpdateWebhookParams {
            webhook_id,
            update_webhook_request,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/webhooks/{webhookId}",
            local_var_configuration.base_path,
            webhookId = crate::apis::urlencode(webhook_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&update_webhook_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<UpdateWebhookError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`create_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateWebhookError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteWebhookError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_notification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNotificationError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_notifications`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNotificationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWebhookError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_webhooks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetWebhooksError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_webhook`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateWebhookError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}
