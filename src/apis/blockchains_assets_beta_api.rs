// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{apis::ResponseContent, models},
    async_trait::async_trait,
    reqwest,
    serde::{Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait BlockchainsAssetsBetaApi: Send + Sync {
    async fn get_asset_by_id(
        &self,
        params: GetAssetByIdParams,
    ) -> Result<models::AssetResponseBeta, Error<GetAssetByIdError>>;
    async fn get_blockchain_by_id(
        &self,
        params: GetBlockchainByIdParams,
    ) -> Result<models::BlockchainResponse, Error<GetBlockchainByIdError>>;
    async fn list_assets(
        &self,
        params: ListAssetsParams,
    ) -> Result<models::ListAssetsResponse, Error<ListAssetsError>>;
    async fn list_blockchains(
        &self,
        params: ListBlockchainsParams,
    ) -> Result<models::ListBlockchainsResponse, Error<ListBlockchainsError>>;
}

pub struct BlockchainsAssetsBetaApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl BlockchainsAssetsBetaApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`get_asset_by_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetAssetByIdParams {
    /// The ID or legacyId of the asset
    pub id: String,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`get_blockchain_by_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetBlockchainByIdParams {
    /// The ID or legacyId of the blockchain
    pub id: String,
}

/// struct for passing parameters to the method [`list_assets`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ListAssetsParams {
    /// Blockchain id of the assets
    pub blockchain_id: Option<String>,
    /// Assets class
    pub asset_class: Option<models::AssetClassBeta>,
    /// Assets onchain symbol
    pub symbol: Option<String>,
    /// Scope of the assets
    pub scope: Option<String>,
    /// Are assets deprecated
    pub deprecated: Option<bool>,
    /// Next page cursor to fetch
    pub page_cursor: Option<String>,
    /// Items per page
    pub page_size: Option<f64>,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`list_blockchains`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ListBlockchainsParams {
    /// Blockchain protocol
    pub protocol: Option<String>,
    /// Is blockchain deprecated
    pub deprecated: Option<bool>,
    /// Is test blockchain
    pub test: Option<bool>,
    /// Page cursor to fetch
    pub page_cursor: Option<String>,
    /// Items per page (max 500)
    pub page_size: Option<f64>,
}

#[async_trait]
impl BlockchainsAssetsBetaApi for BlockchainsAssetsBetaApiClient {
    /// Returns an asset by ID or legacyID.</br>  **Note**: - This endpoint is
    /// now in Beta, disabled for general availability at this time.
    async fn get_asset_by_id(
        &self,
        params: GetAssetByIdParams,
    ) -> Result<models::AssetResponseBeta, Error<GetAssetByIdError>> {
        let GetAssetByIdParams {
            id,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/assets/{id}",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetAssetByIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a blockchain by ID or legacyID.</br>  **Note**: - This endpoint
    /// is now in Beta, disabled for general availability at this time.
    async fn get_blockchain_by_id(
        &self,
        params: GetBlockchainByIdParams,
    ) -> Result<models::BlockchainResponse, Error<GetBlockchainByIdError>> {
        let GetBlockchainByIdParams { id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/blockchains/{id}",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetBlockchainByIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns all asset type supported by Fireblocks.</br>  **Note**: - This
    /// endpoint is now in Beta, disabled for general availability at this time.
    async fn list_assets(
        &self,
        params: ListAssetsParams,
    ) -> Result<models::ListAssetsResponse, Error<ListAssetsError>> {
        let ListAssetsParams {
            blockchain_id,
            asset_class,
            symbol,
            scope,
            deprecated,
            page_cursor,
            page_size,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/assets", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = blockchain_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("blockchainId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = asset_class {
            local_var_req_builder =
                local_var_req_builder.query(&[("assetClass", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = symbol {
            local_var_req_builder =
                local_var_req_builder.query(&[("symbol", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = scope {
            local_var_req_builder =
                local_var_req_builder.query(&[("scope", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = deprecated {
            local_var_req_builder =
                local_var_req_builder.query(&[("deprecated", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ListAssetsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns all blockchains supported by Fireblocks.</br>  **Note**: - This
    /// endpoint is now in Beta, disabled for general availability at this time.
    async fn list_blockchains(
        &self,
        params: ListBlockchainsParams,
    ) -> Result<models::ListBlockchainsResponse, Error<ListBlockchainsError>> {
        let ListBlockchainsParams {
            protocol,
            deprecated,
            test,
            page_cursor,
            page_size,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/blockchains", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = protocol {
            local_var_req_builder =
                local_var_req_builder.query(&[("protocol", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = deprecated {
            local_var_req_builder =
                local_var_req_builder.query(&[("deprecated", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = test {
            local_var_req_builder =
                local_var_req_builder.query(&[("test", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ListBlockchainsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`get_asset_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAssetByIdError {
    Status404(models::AssetNotFoundErrorResponse),
    Status500(models::AssetInternalServerErrorResponse),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_blockchain_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockchainByIdError {
    Status404(models::BlockchainNotFoundErrorResponse),
    Status500(models::AssetInternalServerErrorResponse),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_assets`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListAssetsError {
    Status500(models::AssetInternalServerErrorResponse),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_blockchains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListBlockchainsError {
    Status500(models::AssetInternalServerErrorResponse),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}
