/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait ContractsApi: Send + Sync {
    async fn contracts_contract_id_asset_id_delete(&self,  params: ContractsContractIdAssetIdDeleteParams ) -> Result<(), Error<ContractsContractIdAssetIdDeleteError>>;
    async fn contracts_contract_id_asset_id_get(&self,  params: ContractsContractIdAssetIdGetParams ) -> Result<models::ExternalWalletAsset, Error<ContractsContractIdAssetIdGetError>>;
    async fn contracts_contract_id_asset_id_post(&self,  params: ContractsContractIdAssetIdPostParams ) -> Result<models::ExternalWalletAsset, Error<ContractsContractIdAssetIdPostError>>;
    async fn contracts_contract_id_delete(&self,  params: ContractsContractIdDeleteParams ) -> Result<(), Error<ContractsContractIdDeleteError>>;
    async fn contracts_contract_id_get(&self,  params: ContractsContractIdGetParams ) -> Result<models::UnmanagedWallet, Error<ContractsContractIdGetError>>;
    async fn contracts_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<ContractsGetError>>;
    async fn contracts_post(&self,  params: ContractsPostParams ) -> Result<models::UnmanagedWallet, Error<ContractsPostError>>;
}

pub struct ContractsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ContractsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`contracts_contract_id_asset_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsContractIdAssetIdDeleteParams {
    /// The ID of the contract
    pub contract_id: String,
    /// The ID of the asset to delete
    pub asset_id: String
}

/// struct for passing parameters to the method [`contracts_contract_id_asset_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsContractIdAssetIdGetParams {
    /// The ID of the contract
    pub contract_id: String,
    /// The ID of the asset to return
    pub asset_id: String
}

/// struct for passing parameters to the method [`contracts_contract_id_asset_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsContractIdAssetIdPostParams {
    /// The ID of the contract
    pub contract_id: String,
    /// The ID of the asset to add
    pub asset_id: String,
    pub contracts_contract_id_asset_id_post_request: Option<models::ContractsContractIdAssetIdPostRequest>
}

/// struct for passing parameters to the method [`contracts_contract_id_delete`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsContractIdDeleteParams {
    /// The ID of the contract to delete
    pub contract_id: String
}

/// struct for passing parameters to the method [`contracts_contract_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsContractIdGetParams {
    /// The ID of the contract to return
    pub contract_id: String
}

/// struct for passing parameters to the method [`contracts_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ContractsPostParams {
    pub contracts_post_request: Option<models::ContractsPostRequest>
}


#[async_trait]
impl ContractsApi for ContractsApiClient {
    /// Deletes a contract asset by ID.
    async fn contracts_contract_id_asset_id_delete(&self,  params: ContractsContractIdAssetIdDeleteParams ) -> Result<(), Error<ContractsContractIdAssetIdDeleteError>> {
        
        let ContractsContractIdAssetIdDeleteParams {
            contract_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts/{contractId}/{assetId}", local_var_configuration.base_path, contractId=crate::apis::urlencode(contract_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ContractsContractIdAssetIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a contract asset by ID.
    async fn contracts_contract_id_asset_id_get(&self,  params: ContractsContractIdAssetIdGetParams ) -> Result<models::ExternalWalletAsset, Error<ContractsContractIdAssetIdGetError>> {
        
        let ContractsContractIdAssetIdGetParams {
            contract_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts/{contractId}/{assetId}", local_var_configuration.base_path, contractId=crate::apis::urlencode(contract_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContractsContractIdAssetIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Adds an asset to an existing contract.
    async fn contracts_contract_id_asset_id_post(&self,  params: ContractsContractIdAssetIdPostParams ) -> Result<models::ExternalWalletAsset, Error<ContractsContractIdAssetIdPostError>> {
        
        let ContractsContractIdAssetIdPostParams {
            contract_id,
            asset_id,
            contracts_contract_id_asset_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts/{contractId}/{assetId}", local_var_configuration.base_path, contractId=crate::apis::urlencode(contract_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&contracts_contract_id_asset_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContractsContractIdAssetIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Deletes a contract by ID.
    async fn contracts_contract_id_delete(&self,  params: ContractsContractIdDeleteParams ) -> Result<(), Error<ContractsContractIdDeleteError>> {
        
        let ContractsContractIdDeleteParams {
            contract_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts/{contractId}", local_var_configuration.base_path, contractId=crate::apis::urlencode(contract_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ContractsContractIdDeleteError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a contract by ID.
    async fn contracts_contract_id_get(&self,  params: ContractsContractIdGetParams ) -> Result<models::UnmanagedWallet, Error<ContractsContractIdGetError>> {
        
        let ContractsContractIdGetParams {
            contract_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts/{contractId}", local_var_configuration.base_path, contractId=crate::apis::urlencode(contract_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContractsContractIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Gets a list of contracts.
    async fn contracts_get(&self, ) -> Result<Vec<models::UnmanagedWallet>, Error<ContractsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContractsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Creates a new contract.
    async fn contracts_post(&self,  params: ContractsPostParams ) -> Result<models::UnmanagedWallet, Error<ContractsPostError>> {
        
        let ContractsPostParams {
            contracts_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/contracts", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&contracts_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ContractsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`contracts_contract_id_asset_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsContractIdAssetIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_contract_id_asset_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsContractIdAssetIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_contract_id_asset_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsContractIdAssetIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_contract_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsContractIdDeleteError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_contract_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsContractIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`contracts_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ContractsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

