/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait ExchangeAccountsApi: Send + Sync {
    async fn exchange_accounts_exchange_account_id_asset_id_get(&self,  params: ExchangeAccountsExchangeAccountIdAssetIdGetParams ) -> Result<models::ExchangeAsset, Error<ExchangeAccountsExchangeAccountIdAssetIdGetError>>;
    async fn exchange_accounts_exchange_account_id_convert_post(&self,  params: ExchangeAccountsExchangeAccountIdConvertPostParams ) -> Result<(), Error<ExchangeAccountsExchangeAccountIdConvertPostError>>;
    async fn exchange_accounts_exchange_account_id_get(&self,  params: ExchangeAccountsExchangeAccountIdGetParams ) -> Result<models::ExchangeAccount, Error<ExchangeAccountsExchangeAccountIdGetError>>;
    async fn exchange_accounts_exchange_account_id_internal_transfer_post(&self,  params: ExchangeAccountsExchangeAccountIdInternalTransferPostParams ) -> Result<(), Error<ExchangeAccountsExchangeAccountIdInternalTransferPostError>>;
    async fn exchange_accounts_get(&self, ) -> Result<Vec<models::ExchangeAccount>, Error<ExchangeAccountsGetError>>;
    async fn exchange_accounts_paged_get(&self,  params: ExchangeAccountsPagedGetParams ) -> Result<Vec<models::ExchangeAccountsPaged>, Error<ExchangeAccountsPagedGetError>>;
}

pub struct ExchangeAccountsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl ExchangeAccountsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`exchange_accounts_exchange_account_id_asset_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExchangeAccountsExchangeAccountIdAssetIdGetParams {
    /// The ID of the exchange account to return
    pub exchange_account_id: String,
    /// The ID of the asset to return
    pub asset_id: String
}

/// struct for passing parameters to the method [`exchange_accounts_exchange_account_id_convert_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExchangeAccountsExchangeAccountIdConvertPostParams {
    /// The ID of the exchange account. Please make sure the exchange supports conversions. To find the ID of your exchange account, use GET/exchange_accounts.
    pub exchange_account_id: String,
    pub exchange_accounts_exchange_account_id_convert_post_request: Option<models::ExchangeAccountsExchangeAccountIdConvertPostRequest>
}

/// struct for passing parameters to the method [`exchange_accounts_exchange_account_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExchangeAccountsExchangeAccountIdGetParams {
    /// The ID of the exchange account to return
    pub exchange_account_id: String
}

/// struct for passing parameters to the method [`exchange_accounts_exchange_account_id_internal_transfer_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExchangeAccountsExchangeAccountIdInternalTransferPostParams {
    /// The ID of the exchange account to return
    pub exchange_account_id: String,
    pub exchange_accounts_exchange_account_id_internal_transfer_post_request: Option<models::ExchangeAccountsExchangeAccountIdInternalTransferPostRequest>
}

/// struct for passing parameters to the method [`exchange_accounts_paged_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExchangeAccountsPagedGetParams {
    /// number of exchanges per page
    pub limit: f64,
    pub before: Option<String>,
    pub after: Option<String>
}


#[async_trait]
impl ExchangeAccountsApi for ExchangeAccountsApiClient {
    /// Returns an asset for an exchange account.
    async fn exchange_accounts_exchange_account_id_asset_id_get(&self,  params: ExchangeAccountsExchangeAccountIdAssetIdGetParams ) -> Result<models::ExchangeAsset, Error<ExchangeAccountsExchangeAccountIdAssetIdGetError>> {
        
        let ExchangeAccountsExchangeAccountIdAssetIdGetParams {
            exchange_account_id,
            asset_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts/{exchangeAccountId}/{assetId}", local_var_configuration.base_path, exchangeAccountId=crate::apis::urlencode(exchange_account_id), assetId=crate::apis::urlencode(asset_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExchangeAccountsExchangeAccountIdAssetIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    async fn exchange_accounts_exchange_account_id_convert_post(&self,  params: ExchangeAccountsExchangeAccountIdConvertPostParams ) -> Result<(), Error<ExchangeAccountsExchangeAccountIdConvertPostError>> {
        
        let ExchangeAccountsExchangeAccountIdConvertPostParams {
            exchange_account_id,
            exchange_accounts_exchange_account_id_convert_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts/{exchangeAccountId}/convert", local_var_configuration.base_path, exchangeAccountId=crate::apis::urlencode(exchange_account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&exchange_accounts_exchange_account_id_convert_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ExchangeAccountsExchangeAccountIdConvertPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns an exchange account by ID.
    async fn exchange_accounts_exchange_account_id_get(&self,  params: ExchangeAccountsExchangeAccountIdGetParams ) -> Result<models::ExchangeAccount, Error<ExchangeAccountsExchangeAccountIdGetError>> {
        
        let ExchangeAccountsExchangeAccountIdGetParams {
            exchange_account_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts/{exchangeAccountId}", local_var_configuration.base_path, exchangeAccountId=crate::apis::urlencode(exchange_account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExchangeAccountsExchangeAccountIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Transfers funds between trading accounts under the same exchange account.
    async fn exchange_accounts_exchange_account_id_internal_transfer_post(&self,  params: ExchangeAccountsExchangeAccountIdInternalTransferPostParams ) -> Result<(), Error<ExchangeAccountsExchangeAccountIdInternalTransferPostError>> {
        
        let ExchangeAccountsExchangeAccountIdInternalTransferPostParams {
            exchange_account_id,
            exchange_accounts_exchange_account_id_internal_transfer_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts/{exchangeAccountId}/internal_transfer", local_var_configuration.base_path, exchangeAccountId=crate::apis::urlencode(exchange_account_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&exchange_accounts_exchange_account_id_internal_transfer_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<ExchangeAccountsExchangeAccountIdInternalTransferPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns all exchange accounts. </br> **Note:** This endpoint will be deprecated soon. Please use the `/exchange_accounts/paged` endpoint instead. 
    async fn exchange_accounts_get(&self, ) -> Result<Vec<models::ExchangeAccount>, Error<ExchangeAccountsGetError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExchangeAccountsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a paginated list of exchange accounts.
    async fn exchange_accounts_paged_get(&self,  params: ExchangeAccountsPagedGetParams ) -> Result<Vec<models::ExchangeAccountsPaged>, Error<ExchangeAccountsPagedGetError>> {
        
        let ExchangeAccountsPagedGetParams {
            limit,
            before,
            after,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/exchange_accounts/paged", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = before {
            local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = after {
            local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
        }
        local_var_req_builder = local_var_req_builder.query(&[("limit", &limit.to_string())]);
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExchangeAccountsPagedGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`exchange_accounts_exchange_account_id_asset_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsExchangeAccountIdAssetIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_accounts_exchange_account_id_convert_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsExchangeAccountIdConvertPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_accounts_exchange_account_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsExchangeAccountIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_accounts_exchange_account_id_internal_transfer_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsExchangeAccountIdInternalTransferPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_accounts_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`exchange_accounts_paged_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExchangeAccountsPagedGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

