// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{
        apis::{ContentType, ResponseContent},
        models,
    },
    async_trait::async_trait,
    reqwest,
    serde::{de::Error as _, Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait DeployedContractsApi: Send + Sync {
    /// POST /tokenization/contracts/abi
    ///
    /// Save contract ABI for the tenant. </br>Endpoint Permission: Owner,
    /// Admin, Non-Signing Admin, Signer, and Editor.
    async fn add_contract_abi(
        &self,
        params: AddContractAbiParams,
    ) -> Result<models::ContractWithAbiDto, Error<AddContractAbiError>>;

    /// POST /tokenization/contracts/fetch_abi
    ///
    /// Fetch the ABI. If not found fetch the ABI from the block explorer.
    /// </br>Endpoint Permission: Admin, Non-Signing Admin, Signer, Approver,
    /// Editor, Viewer.
    async fn fetch_contract_abi(
        &self,
        params: FetchContractAbiParams,
    ) -> Result<models::ContractWithAbiDto, Error<FetchContractAbiError>>;

    /// GET /tokenization/contracts/{assetId}/{contractAddress}
    ///
    /// Return deployed contract data by blockchain native asset id and contract
    /// address. </br>Endpoint Permission: Admin, Non-Signing Admin, Signer,
    /// Approver, Editor, Viewer.
    async fn get_deployed_contract_by_address(
        &self,
        params: GetDeployedContractByAddressParams,
    ) -> Result<models::DeployedContractResponseDto, Error<GetDeployedContractByAddressError>>;

    /// GET /tokenization/contracts/{id}
    ///
    /// Return deployed contract data by id. </br>Endpoint Permission: Admin,
    /// Non-Signing Admin, Signer, Approver, Editor, Viewer.
    async fn get_deployed_contract_by_id(
        &self,
        params: GetDeployedContractByIdParams,
    ) -> Result<models::DeployedContractResponseDto, Error<GetDeployedContractByIdError>>;

    /// GET /tokenization/contracts
    ///
    /// Return a filtered lean representation of the deployed contracts data on
    /// all blockchains (paginated). </br>Endpoint Permission: Admin,
    /// Non-Signing Admin, Signer, Approver, Editor, Viewer.
    async fn get_deployed_contracts(
        &self,
        params: GetDeployedContractsParams,
    ) -> Result<models::DeployedContractsPaginatedResponse, Error<GetDeployedContractsError>>;
}

pub struct DeployedContractsApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl DeployedContractsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`add_contract_abi`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct AddContractAbiParams {
    pub add_abi_request_dto: models::AddAbiRequestDto,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`fetch_contract_abi`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct FetchContractAbiParams {
    pub fetch_abi_request_dto: models::FetchAbiRequestDto,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method
/// [`get_deployed_contract_by_address`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetDeployedContractByAddressParams {
    /// The contract's onchain address
    pub contract_address: String,
    /// The blockchain base asset ID
    pub asset_id: String,
}

/// struct for passing parameters to the method [`get_deployed_contract_by_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetDeployedContractByIdParams {
    /// The deployed contract data identifier
    pub id: String,
}

/// struct for passing parameters to the method [`get_deployed_contracts`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetDeployedContractsParams {
    /// Page cursor to get the next page
    pub page_cursor: Option<String>,
    /// Number of items per page, requesting more then max will return max items
    pub page_size: Option<f64>,
    /// The contract's onchain address
    pub contract_address: Option<String>,
    /// The blockchain asset ID
    pub base_asset_id: Option<String>,
    /// The contract template identifier
    pub contract_template_id: Option<String>,
}

#[async_trait]
impl DeployedContractsApi for DeployedContractsApiClient {
    /// Save contract ABI for the tenant. </br>Endpoint Permission: Owner,
    /// Admin, Non-Signing Admin, Signer, and Editor.
    async fn add_contract_abi(
        &self,
        params: AddContractAbiParams,
    ) -> Result<models::ContractWithAbiDto, Error<AddContractAbiError>> {
        let AddContractAbiParams {
            add_abi_request_dto,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/tokenization/contracts/abi",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&add_abi_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `models::ContractWithAbiDto`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `models::ContractWithAbiDto`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<AddContractAbiError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Fetch the ABI. If not found fetch the ABI from the block explorer.
    /// </br>Endpoint Permission: Admin, Non-Signing Admin, Signer, Approver,
    /// Editor, Viewer.
    async fn fetch_contract_abi(
        &self,
        params: FetchContractAbiParams,
    ) -> Result<models::ContractWithAbiDto, Error<FetchContractAbiError>> {
        let FetchContractAbiParams {
            fetch_abi_request_dto,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/tokenization/contracts/fetch_abi",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&fetch_abi_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `models::ContractWithAbiDto`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `models::ContractWithAbiDto`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<FetchContractAbiError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return deployed contract data by blockchain native asset id and contract
    /// address. </br>Endpoint Permission: Admin, Non-Signing Admin, Signer,
    /// Approver, Editor, Viewer.
    async fn get_deployed_contract_by_address(
        &self,
        params: GetDeployedContractByAddressParams,
    ) -> Result<models::DeployedContractResponseDto, Error<GetDeployedContractByAddressError>> {
        let GetDeployedContractByAddressParams {
            contract_address,
            asset_id,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/tokenization/contracts/{assetId}/{contractAddress}",
            local_var_configuration.base_path,
            contractAddress = crate::apis::urlencode(contract_address),
            assetId = crate::apis::urlencode(asset_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `models::DeployedContractResponseDto`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `models::DeployedContractResponseDto`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<GetDeployedContractByAddressError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return deployed contract data by id. </br>Endpoint Permission: Admin,
    /// Non-Signing Admin, Signer, Approver, Editor, Viewer.
    async fn get_deployed_contract_by_id(
        &self,
        params: GetDeployedContractByIdParams,
    ) -> Result<models::DeployedContractResponseDto, Error<GetDeployedContractByIdError>> {
        let GetDeployedContractByIdParams { id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/tokenization/contracts/{id}",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `models::DeployedContractResponseDto`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `models::DeployedContractResponseDto`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<GetDeployedContractByIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return a filtered lean representation of the deployed contracts data on
    /// all blockchains (paginated). </br>Endpoint Permission: Admin,
    /// Non-Signing Admin, Signer, Approver, Editor, Viewer.
    async fn get_deployed_contracts(
        &self,
        params: GetDeployedContractsParams,
    ) -> Result<models::DeployedContractsPaginatedResponse, Error<GetDeployedContractsError>> {
        let GetDeployedContractsParams {
            page_cursor,
            page_size,
            contract_address,
            base_asset_id,
            contract_template_id,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/tokenization/contracts",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = contract_address {
            local_var_req_builder =
                local_var_req_builder.query(&[("contractAddress", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = base_asset_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("baseAssetId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = contract_template_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("contractTemplateId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content_type = local_var_resp
            .headers()
            .get("content-type")
            .and_then(|v| v.to_str().ok())
            .unwrap_or("application/octet-stream");
        let local_var_content_type = super::ContentType::from(local_var_content_type);
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            match local_var_content_type {
                ContentType::Json => serde_json::from_str(&local_var_content).map_err(Error::from),
                ContentType::Text => {
                    return Err(Error::from(serde_json::Error::custom(
                        "Received `text/plain` content type response that cannot be converted to \
                         `models::DeployedContractsPaginatedResponse`",
                    )))
                }
                ContentType::Unsupported(local_var_unknown_type) => {
                    return Err(Error::from(serde_json::Error::custom(format!(
                        "Received `{local_var_unknown_type}` content type response that cannot be \
                         converted to `models::DeployedContractsPaginatedResponse`"
                    ))))
                }
            }
        } else {
            let local_var_entity: Option<GetDeployedContractsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`add_contract_abi`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddContractAbiError {
    Status409(),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`fetch_contract_abi`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FetchContractAbiError {
    Status404(),
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_deployed_contract_by_address`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeployedContractByAddressError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_deployed_contract_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeployedContractByIdError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_deployed_contracts`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDeployedContractsError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}
