/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait WebhooksApi: Send + Sync {
    async fn webhooks_resend_post(&self, ) -> Result<models::ResendWebhooksResponse, Error<WebhooksResendPostError>>;
    async fn webhooks_resend_tx_id_post(&self,  params: WebhooksResendTxIdPostParams ) -> Result<(), Error<WebhooksResendTxIdPostError>>;
}

pub struct WebhooksApiClient {
    configuration: Arc<configuration::Configuration>
}

impl WebhooksApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`webhooks_resend_tx_id_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct WebhooksResendTxIdPostParams {
    /// The Fireblocks Transaction ID
    pub tx_id: String,
    pub webhooks_resend_tx_id_post_request: models::WebhooksResendTxIdPostRequest
}


#[async_trait]
impl WebhooksApi for WebhooksApiClient {
    /// Resends all failed webhook notifications.
    async fn webhooks_resend_post(&self, ) -> Result<models::ResendWebhooksResponse, Error<WebhooksResendPostError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/webhooks/resend", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<WebhooksResendPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Resends failed webhook notifications for a specific transaction identified by Fireblocks Transaction ID
    async fn webhooks_resend_tx_id_post(&self,  params: WebhooksResendTxIdPostParams ) -> Result<(), Error<WebhooksResendTxIdPostError>> {
        
        let WebhooksResendTxIdPostParams {
            tx_id,
            webhooks_resend_tx_id_post_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/webhooks/resend/{txId}", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&webhooks_resend_tx_id_post_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<WebhooksResendTxIdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`webhooks_resend_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhooksResendPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`webhooks_resend_tx_id_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WebhooksResendTxIdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

