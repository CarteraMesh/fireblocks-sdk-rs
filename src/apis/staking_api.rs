/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait StakingApi: Send + Sync {
    async fn approve_terms_of_service_by_provider_id(&self,  params: ApproveTermsOfServiceByProviderIdParams ) -> Result<serde_json::Value, Error<ApproveTermsOfServiceByProviderIdError>>;
    async fn claim_rewards(&self,  params: ClaimRewardsParams ) -> Result<serde_json::Value, Error<ClaimRewardsError>>;
    async fn get_all_delegations(&self,  params: GetAllDelegationsParams ) -> Result<Vec<models::DelegationDto>, Error<GetAllDelegationsError>>;
    async fn get_chain_info(&self,  params: GetChainInfoParams ) -> Result<models::ChainInfoResponseDto, Error<GetChainInfoError>>;
    async fn get_chains(&self, ) -> Result<Vec<String>, Error<GetChainsError>>;
    async fn get_delegation_by_id(&self,  params: GetDelegationByIdParams ) -> Result<models::DelegationDto, Error<GetDelegationByIdError>>;
    async fn get_providers(&self, ) -> Result<Vec<models::ProviderDto>, Error<GetProvidersError>>;
    async fn get_summary(&self, ) -> Result<models::DelegationSummaryDto, Error<GetSummaryError>>;
    async fn get_summary_by_vault(&self, ) -> Result<std::collections::HashMap<String, models::DelegationSummaryDto>, Error<GetSummaryByVaultError>>;
    async fn stake(&self,  params: StakeParams ) -> Result<models::StakeResponseDto, Error<StakeError>>;
    async fn unstake(&self,  params: UnstakeParams ) -> Result<serde_json::Value, Error<UnstakeError>>;
    async fn withdraw(&self,  params: WithdrawParams ) -> Result<serde_json::Value, Error<WithdrawError>>;
}

pub struct StakingApiClient {
    configuration: Arc<configuration::Configuration>
}

impl StakingApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`approve_terms_of_service_by_provider_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ApproveTermsOfServiceByProviderIdParams {
    /// The unique identifier of the staking provider
    pub provider_id: String
}

/// struct for passing parameters to the method [`claim_rewards`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ClaimRewardsParams {
    /// The protocol identifier (e.g. \"MATIC\") to use
    pub chain_descriptor: String,
    pub claim_rewards_request_dto: models::ClaimRewardsRequestDto
}

/// struct for passing parameters to the method [`get_all_delegations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetAllDelegationsParams {
    /// Use \"ETH\" / \"SOL\"/ \"MATIC\" in order to obtain information related to the specific blockchain network or retrieve information about all chains that have data available by providing no argument.
    pub chain_descriptor: Option<String>
}

/// struct for passing parameters to the method [`get_chain_info`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetChainInfoParams {
    /// The protocol identifier (e.g. \"ETH\"/\"SOL\"/\"MATIC\") to use
    pub chain_descriptor: String
}

/// struct for passing parameters to the method [`get_delegation_by_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetDelegationByIdParams {
    /// The unique identifier of the staking position
    pub id: String
}

/// struct for passing parameters to the method [`stake`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct StakeParams {
    /// The protocol identifier (e.g. \"ETH\"/\"SOL\"/\"MATIC\") to use
    pub chain_descriptor: String,
    pub stake_request_dto: models::StakeRequestDto
}

/// struct for passing parameters to the method [`unstake`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UnstakeParams {
    /// The protocol identifier (e.g. \"SOL\"/\"MATIC\") to use
    pub chain_descriptor: String,
    pub unstake_request_dto: models::UnstakeRequestDto
}

/// struct for passing parameters to the method [`withdraw`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct WithdrawParams {
    /// The protocol identifier (e.g. \"ETH\"/\"SOL\"/\"MATIC\") to use
    pub chain_descriptor: String,
    pub withdraw_request_dto: models::WithdrawRequestDto
}


#[async_trait]
impl StakingApi for StakingApiClient {
    /// Approve the terms of service of the staking provider. This must be called before performing a staking action for the first time with this provider.
    async fn approve_terms_of_service_by_provider_id(&self,  params: ApproveTermsOfServiceByProviderIdParams ) -> Result<serde_json::Value, Error<ApproveTermsOfServiceByProviderIdError>> {
        
        let ApproveTermsOfServiceByProviderIdParams {
            provider_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/providers/{providerId}/approveTermsOfService", local_var_configuration.base_path, providerId=crate::apis::urlencode(provider_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ApproveTermsOfServiceByProviderIdError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Perform a chain-specific Claim Rewards.
    async fn claim_rewards(&self,  params: ClaimRewardsParams ) -> Result<serde_json::Value, Error<ClaimRewardsError>> {
        
        let ClaimRewardsParams {
            chain_descriptor,
            claim_rewards_request_dto,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains/{chainDescriptor}/claimRewards", local_var_configuration.base_path, chainDescriptor=crate::apis::urlencode(chain_descriptor));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&claim_rewards_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ClaimRewardsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return detailed information on all staking positions, including the staked amount, rewards, status and more.
    async fn get_all_delegations(&self,  params: GetAllDelegationsParams ) -> Result<Vec<models::DelegationDto>, Error<GetAllDelegationsError>> {
        
        let GetAllDelegationsParams {
            chain_descriptor,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/positions", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = chain_descriptor {
            local_var_req_builder = local_var_req_builder.query(&[("chainDescriptor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetAllDelegationsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return chain-specific, staking-related information summary (e.g. epoch details, lockup durations, estimated rewards, etc.).
    async fn get_chain_info(&self,  params: GetChainInfoParams ) -> Result<models::ChainInfoResponseDto, Error<GetChainInfoError>> {
        
        let GetChainInfoParams {
            chain_descriptor,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains/{chainDescriptor}/chainInfo", local_var_configuration.base_path, chainDescriptor=crate::apis::urlencode(chain_descriptor));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetChainInfoError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return an alphabetical list of supported chains.
    async fn get_chains(&self, ) -> Result<Vec<String>, Error<GetChainsError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetChainsError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return detailed information on a staking position, including the staked amount, rewards, status and more.
    async fn get_delegation_by_id(&self,  params: GetDelegationByIdParams ) -> Result<models::DelegationDto, Error<GetDelegationByIdError>> {
        
        let GetDelegationByIdParams {
            id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/positions/{id}", local_var_configuration.base_path, id=crate::apis::urlencode(id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetDelegationByIdError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return information on all the available staking providers.
    async fn get_providers(&self, ) -> Result<Vec<models::ProviderDto>, Error<GetProvidersError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/providers", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetProvidersError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return a summary of all vaults, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
    async fn get_summary(&self, ) -> Result<models::DelegationSummaryDto, Error<GetSummaryError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/positions/summary", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSummaryError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return a summary for each vault, categorized by their status (active, inactive), the total amounts staked and total rewards per-chain.
    async fn get_summary_by_vault(&self, ) -> Result<std::collections::HashMap<String, models::DelegationSummaryDto>, Error<GetSummaryByVaultError>> {
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/positions/summary/vaults", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSummaryByVaultError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Perform a chain-specific Stake.
    async fn stake(&self,  params: StakeParams ) -> Result<models::StakeResponseDto, Error<StakeError>> {
        
        let StakeParams {
            chain_descriptor,
            stake_request_dto,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains/{chainDescriptor}/stake", local_var_configuration.base_path, chainDescriptor=crate::apis::urlencode(chain_descriptor));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&stake_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<StakeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Perform a chain-specific Unstake.
    async fn unstake(&self,  params: UnstakeParams ) -> Result<serde_json::Value, Error<UnstakeError>> {
        
        let UnstakeParams {
            chain_descriptor,
            unstake_request_dto,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains/{chainDescriptor}/unstake", local_var_configuration.base_path, chainDescriptor=crate::apis::urlencode(chain_descriptor));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&unstake_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<UnstakeError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Perform a chain-specific Withdraw.
    async fn withdraw(&self,  params: WithdrawParams ) -> Result<serde_json::Value, Error<WithdrawError>> {
        
        let WithdrawParams {
            chain_descriptor,
            withdraw_request_dto,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains/{chainDescriptor}/withdraw", local_var_configuration.base_path, chainDescriptor=crate::apis::urlencode(chain_descriptor));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&withdraw_request_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<WithdrawError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`approve_terms_of_service_by_provider_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApproveTermsOfServiceByProviderIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`claim_rewards`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ClaimRewardsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_delegations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllDelegationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_chain_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChainInfoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_chains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChainsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_delegation_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDelegationByIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProvidersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_summary_by_vault`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSummaryByVaultError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stake`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StakeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`unstake`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnstakeError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`withdraw`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WithdrawError {
    UnknownValue(serde_json::Value),
}

