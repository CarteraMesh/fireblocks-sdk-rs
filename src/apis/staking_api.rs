// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{apis::ResponseContent, models},
    async_trait::async_trait,
    reqwest,
    serde::{Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait StakingApi: Send + Sync {
    async fn approve_terms_of_service_by_provider_id(
        &self,
        params: ApproveTermsOfServiceByProviderIdParams,
    ) -> Result<serde_json::Value, Error<ApproveTermsOfServiceByProviderIdError>>;
    async fn execute_action(
        &self,
        params: ExecuteActionParams,
    ) -> Result<models::ExecuteActionResponse, Error<ExecuteActionError>>;
    async fn get_all_delegations(
        &self,
        params: GetAllDelegationsParams,
    ) -> Result<Vec<models::DelegationDto>, Error<GetAllDelegationsError>>;
    async fn get_chain_info(
        &self,
        params: GetChainInfoParams,
    ) -> Result<models::ChainInfoResponseDto, Error<GetChainInfoError>>;
    async fn get_chains(&self) -> Result<Vec<String>, Error<GetChainsError>>;
    async fn get_delegation_by_id(
        &self,
        params: GetDelegationByIdParams,
    ) -> Result<models::DelegationDto, Error<GetDelegationByIdError>>;
    async fn get_providers(&self) -> Result<Vec<models::ProviderDto>, Error<GetProvidersError>>;
    async fn get_summary(&self) -> Result<models::DelegationSummaryDto, Error<GetSummaryError>>;
    async fn get_summary_by_vault(
        &self,
    ) -> Result<
        std::collections::HashMap<String, models::DelegationSummaryDto>,
        Error<GetSummaryByVaultError>,
    >;
}

pub struct StakingApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl StakingApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method
/// [`approve_terms_of_service_by_provider_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ApproveTermsOfServiceByProviderIdParams {
    /// The unique identifier of the staking provider
    pub provider_id: String,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`execute_action`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct ExecuteActionParams {
    /// The protocol identifier (e.g. \"ETH\"/\"SOL\") to use
    pub chain_descriptor: String,
    /// The operation that can be executed on a vault/position
    pub action_id: String,
    pub execute_action_request: models::ExecuteActionRequest,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`get_all_delegations`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetAllDelegationsParams {
    /// Use \"ETH\" / \"SOL\"/ \"MATIC\" in order to obtain information related
    /// to the specific blockchain network or retrieve information about all
    /// chains that have data available by providing no argument.
    pub chain_descriptor: Option<String>,
}

/// struct for passing parameters to the method [`get_chain_info`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetChainInfoParams {
    /// The protocol identifier (e.g. \"ETH\"/\"SOL\"/\"MATIC\") to use
    pub chain_descriptor: String,
}

/// struct for passing parameters to the method [`get_delegation_by_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetDelegationByIdParams {
    /// The unique identifier of the staking position
    pub id: String,
}

#[async_trait]
impl StakingApi for StakingApiClient {
    /// Approve the terms of service of the staking provider. This must be
    /// called before performing a staking action for the first time with this
    /// provider.
    async fn approve_terms_of_service_by_provider_id(
        &self,
        params: ApproveTermsOfServiceByProviderIdParams,
    ) -> Result<serde_json::Value, Error<ApproveTermsOfServiceByProviderIdError>> {
        let ApproveTermsOfServiceByProviderIdParams {
            provider_id,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/providers/{providerId}/approveTermsOfService",
            local_var_configuration.base_path,
            providerId = crate::apis::urlencode(provider_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ApproveTermsOfServiceByProviderIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Perform a chain-specific staking action (e.g. stake, unstake, withdraw).
    async fn execute_action(
        &self,
        params: ExecuteActionParams,
    ) -> Result<models::ExecuteActionResponse, Error<ExecuteActionError>> {
        let ExecuteActionParams {
            chain_descriptor,
            action_id,
            execute_action_request,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/chains/{chainDescriptor}/{actionId}",
            local_var_configuration.base_path,
            chainDescriptor = crate::apis::urlencode(chain_descriptor),
            actionId = crate::apis::urlencode(action_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&execute_action_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<ExecuteActionError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return detailed information on all staking positions, including the
    /// staked amount, rewards, status and more.
    async fn get_all_delegations(
        &self,
        params: GetAllDelegationsParams,
    ) -> Result<Vec<models::DelegationDto>, Error<GetAllDelegationsError>> {
        let GetAllDelegationsParams { chain_descriptor } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/positions", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = chain_descriptor {
            local_var_req_builder =
                local_var_req_builder.query(&[("chainDescriptor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetAllDelegationsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return chain-specific, staking-related information summary (e.g. epoch
    /// details, lockup durations, estimated rewards, etc.).
    async fn get_chain_info(
        &self,
        params: GetChainInfoParams,
    ) -> Result<models::ChainInfoResponseDto, Error<GetChainInfoError>> {
        let GetChainInfoParams { chain_descriptor } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/chains/{chainDescriptor}/chainInfo",
            local_var_configuration.base_path,
            chainDescriptor = crate::apis::urlencode(chain_descriptor)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetChainInfoError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return an alphabetical list of supported chains.
    async fn get_chains(&self) -> Result<Vec<String>, Error<GetChainsError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/chains", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetChainsError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return detailed information on a staking position, including the staked
    /// amount, rewards, status and more.
    async fn get_delegation_by_id(
        &self,
        params: GetDelegationByIdParams,
    ) -> Result<models::DelegationDto, Error<GetDelegationByIdError>> {
        let GetDelegationByIdParams { id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/positions/{id}",
            local_var_configuration.base_path,
            id = crate::apis::urlencode(id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetDelegationByIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return information on all the available staking providers.
    async fn get_providers(&self) -> Result<Vec<models::ProviderDto>, Error<GetProvidersError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/staking/providers", local_var_configuration.base_path);
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetProvidersError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return a summary of all vaults, categorized by their status (active,
    /// inactive), the total amounts staked and total rewards per-chain.
    async fn get_summary(&self) -> Result<models::DelegationSummaryDto, Error<GetSummaryError>> {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/positions/summary",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSummaryError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Return a summary for each vault, categorized by their status (active,
    /// inactive), the total amounts staked and total rewards per-chain.
    async fn get_summary_by_vault(
        &self,
    ) -> Result<
        std::collections::HashMap<String, models::DelegationSummaryDto>,
        Error<GetSummaryByVaultError>,
    > {
        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/staking/positions/summary/vaults",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSummaryByVaultError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method
/// [`approve_terms_of_service_by_provider_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ApproveTermsOfServiceByProviderIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`execute_action`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExecuteActionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_all_delegations`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAllDelegationsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_chain_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChainInfoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_chains`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetChainsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_delegation_by_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetDelegationByIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_providers`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetProvidersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_summary`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSummaryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_summary_by_vault`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSummaryByVaultError {
    UnknownValue(serde_json::Value),
}
