/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait TransactionsApi: Send + Sync {
    async fn transactions_estimate_fee_post(&self,  params: TransactionsEstimateFeePostParams ) -> Result<models::EstimatedTransactionFeeResponse, Error<TransactionsEstimateFeePostError>>;
    async fn transactions_external_tx_id_external_tx_id_get(&self,  params: TransactionsExternalTxIdExternalTxIdGetParams ) -> Result<models::TransactionResponse, Error<TransactionsExternalTxIdExternalTxIdGetError>>;
    async fn transactions_get(&self,  params: TransactionsGetParams ) -> Result<Vec<models::TransactionResponse>, Error<TransactionsGetError>>;
    async fn transactions_post(&self,  params: TransactionsPostParams ) -> Result<models::CreateTransactionResponse, Error<TransactionsPostError>>;
    async fn transactions_tx_id_cancel_post(&self,  params: TransactionsTxIdCancelPostParams ) -> Result<models::CancelTransactionResponse, Error<TransactionsTxIdCancelPostError>>;
    async fn transactions_tx_id_drop_post(&self,  params: TransactionsTxIdDropPostParams ) -> Result<models::DropTransactionResponse, Error<TransactionsTxIdDropPostError>>;
    async fn transactions_tx_id_freeze_post(&self,  params: TransactionsTxIdFreezePostParams ) -> Result<models::FreezeTransactionResponse, Error<TransactionsTxIdFreezePostError>>;
    async fn transactions_tx_id_get(&self,  params: TransactionsTxIdGetParams ) -> Result<models::TransactionResponse, Error<TransactionsTxIdGetError>>;
    async fn transactions_tx_id_set_confirmation_threshold_post(&self,  params: TransactionsTxIdSetConfirmationThresholdPostParams ) -> Result<models::SetConfirmationsThresholdResponse, Error<TransactionsTxIdSetConfirmationThresholdPostError>>;
    async fn transactions_tx_id_unfreeze_post(&self,  params: TransactionsTxIdUnfreezePostParams ) -> Result<models::UnfreezeTransactionResponse, Error<TransactionsTxIdUnfreezePostError>>;
    async fn tx_hash_tx_hash_set_confirmation_threshold_post(&self,  params: TxHashTxHashSetConfirmationThresholdPostParams ) -> Result<models::SetConfirmationsThresholdResponse, Error<TxHashTxHashSetConfirmationThresholdPostError>>;
}

pub struct TransactionsApiClient {
    configuration: Arc<configuration::Configuration>
}

impl TransactionsApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`transactions_estimate_fee_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsEstimateFeePostParams {
    pub estimated_fee_request: Option<models::EstimatedFeeRequest>
}

/// struct for passing parameters to the method [`transactions_external_tx_id_external_tx_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsExternalTxIdExternalTxIdGetParams {
    /// The external ID of the transaction to return
    pub external_tx_id: String
}

/// struct for passing parameters to the method [`transactions_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsGetParams {
    /// Unix timestamp in milliseconds. Returns only transactions created before the specified date
    pub before: Option<String>,
    /// Unix timestamp in milliseconds. Returns only transactions created after the specified date
    pub after: Option<String>,
    /// You can filter by one of the statuses.
    pub status: Option<String>,
    /// The field to order the results by  **Note**: Ordering by a field that is not createdAt may result with transactions that receive updates as you request the next or previous pages of results, resulting with missing those transactions.
    pub order_by: Option<String>,
    /// The direction to order the results by
    pub sort: Option<String>,
    /// Limits the number of results. If not provided, a limit of 200 will be used. The maximum allowed limit is 500
    pub limit: Option<u32>,
    /// The source type of the transaction
    pub source_type: Option<String>,
    /// The source ID of the transaction
    pub source_id: Option<String>,
    /// The destination type of the transaction
    pub dest_type: Option<String>,
    /// The destination ID of the transaction
    pub dest_id: Option<String>,
    /// A list of assets to filter by, seperated by commas
    pub assets: Option<String>,
    /// Returns only results with a specified txHash
    pub tx_hash: Option<String>,
    /// Returns only results where the source is a specific end user wallet
    pub source_wallet_id: Option<String>,
    /// Returns only results where the destination is a specific end user wallet
    pub dest_wallet_id: Option<String>
}

/// struct for passing parameters to the method [`transactions_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsPostParams {
    /// Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
    pub x_end_user_wallet_id: Option<String>,
    pub transaction_request: Option<models::TransactionRequest>
}

/// struct for passing parameters to the method [`transactions_tx_id_cancel_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdCancelPostParams {
    /// The ID of the transaction to cancel
    pub tx_id: String,
    /// Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
    pub x_end_user_wallet_id: Option<String>
}

/// struct for passing parameters to the method [`transactions_tx_id_drop_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdDropPostParams {
    /// The ID of the transaction
    pub tx_id: String,
    /// Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
    pub x_end_user_wallet_id: Option<String>,
    pub drop_transaction_request: Option<models::DropTransactionRequest>
}

/// struct for passing parameters to the method [`transactions_tx_id_freeze_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdFreezePostParams {
    /// The ID of the transaction to freeze
    pub tx_id: String,
    /// Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
    pub x_end_user_wallet_id: Option<String>
}

/// struct for passing parameters to the method [`transactions_tx_id_get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdGetParams {
    /// The ID of the transaction to return
    pub tx_id: String
}

/// struct for passing parameters to the method [`transactions_tx_id_set_confirmation_threshold_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdSetConfirmationThresholdPostParams {
    /// The ID of the transaction
    pub tx_id: String,
    pub set_confirmations_threshold_request: Option<models::SetConfirmationsThresholdRequest>
}

/// struct for passing parameters to the method [`transactions_tx_id_unfreeze_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TransactionsTxIdUnfreezePostParams {
    /// The ID of the transaction to unfreeze
    pub tx_id: String,
    /// Unique ID of the End-User wallet to the API request. Required for end-user wallet operations.
    pub x_end_user_wallet_id: Option<String>
}

/// struct for passing parameters to the method [`tx_hash_tx_hash_set_confirmation_threshold_post`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TxHashTxHashSetConfirmationThresholdPostParams {
    /// The TxHash
    pub tx_hash: String,
    pub set_confirmations_threshold_request: Option<models::SetConfirmationsThresholdRequest>
}


#[async_trait]
impl TransactionsApi for TransactionsApiClient {
    /// Estimates the transaction fee for a transaction request.  ***Note:***  -Supports all Fireblocks assets except ZCash (ZEC).  -For XEM and Chiliz assets, 0 will be returned for all three fee levels, as there is no gas or tip price on these blockchains. You can use the POST /v1/transactions/estimate_fee to see what the exact fee will be for a transaction on this network. 
    async fn transactions_estimate_fee_post(&self,  params: TransactionsEstimateFeePostParams ) -> Result<models::EstimatedTransactionFeeResponse, Error<TransactionsEstimateFeePostError>> {
        
        let TransactionsEstimateFeePostParams {
            estimated_fee_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/estimate_fee", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&estimated_fee_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsEstimateFeePostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns transaction by external transaction ID.
    async fn transactions_external_tx_id_external_tx_id_get(&self,  params: TransactionsExternalTxIdExternalTxIdGetParams ) -> Result<models::TransactionResponse, Error<TransactionsExternalTxIdExternalTxIdGetError>> {
        
        let TransactionsExternalTxIdExternalTxIdGetParams {
            external_tx_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/external_tx_id/{externalTxId}/", local_var_configuration.base_path, externalTxId=crate::apis::urlencode(external_tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsExternalTxIdExternalTxIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Lists the transaction history for your workspace.
    async fn transactions_get(&self,  params: TransactionsGetParams ) -> Result<Vec<models::TransactionResponse>, Error<TransactionsGetError>> {
        
        let TransactionsGetParams {
            before,
            after,
            status,
            order_by,
            sort,
            limit,
            source_type,
            source_id,
            dest_type,
            dest_id,
            assets,
            tx_hash,
            source_wallet_id,
            dest_wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = before {
            local_var_req_builder = local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = after {
            local_var_req_builder = local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = status {
            local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order_by {
            local_var_req_builder = local_var_req_builder.query(&[("orderBy", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = sort {
            local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = limit {
            local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source_type {
            local_var_req_builder = local_var_req_builder.query(&[("sourceType", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source_id {
            local_var_req_builder = local_var_req_builder.query(&[("sourceId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = dest_type {
            local_var_req_builder = local_var_req_builder.query(&[("destType", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = dest_id {
            local_var_req_builder = local_var_req_builder.query(&[("destId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = assets {
            local_var_req_builder = local_var_req_builder.query(&[("assets", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = tx_hash {
            local_var_req_builder = local_var_req_builder.query(&[("txHash", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = source_wallet_id {
            local_var_req_builder = local_var_req_builder.query(&[("sourceWalletId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = dest_wallet_id {
            local_var_req_builder = local_var_req_builder.query(&[("destWalletId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Creates a new transaction. This endpoint can be used for regular Transfers, Contract Calls, Raw & Typed message signing. - For Transfers, the required parameters are: `assetId`, `source`, `destination` and `amount`.   This endpoint is also used for native NFT transfers. For more details, please see the [Transferring NFT](https://developers.fireblocks.com/docs/transferring-nfts) guide.  - For Contract Calls, the required parameters are: `operation.CONTRACT_CALL`, `assetId` (Base Asset), `source`, `destination`, `amount` (usually 0) and `extraParameters` object with `contractCallData` string.  - For RAW and Typed messages signing, the required parameters are: `operation.RAW/TYPED_MESSAGE`, `assetId` or `derivationPath`, `source` or `derivationPath`, `extraParameters` with [rawMessageData object](https://developers.fireblocks.com/reference/raw-signing-objects).  - Typed Message Signing is supported for the following asset IDs: 'ETH', 'BTC' and 'TRX'. [Typed Message Signing Guide](https://developers.fireblocks.com/docs/typed-message-signing-overview). 
    async fn transactions_post(&self,  params: TransactionsPostParams ) -> Result<models::CreateTransactionResponse, Error<TransactionsPostError>> {
        
        let TransactionsPostParams {
            x_end_user_wallet_id,
            transaction_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = x_end_user_wallet_id {
            local_var_req_builder = local_var_req_builder.header("X-End-User-Wallet-Id", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&transaction_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Cancels a transaction by ID.
    async fn transactions_tx_id_cancel_post(&self,  params: TransactionsTxIdCancelPostParams ) -> Result<models::CancelTransactionResponse, Error<TransactionsTxIdCancelPostError>> {
        
        let TransactionsTxIdCancelPostParams {
            tx_id,
            x_end_user_wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}/cancel", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = x_end_user_wallet_id {
            local_var_req_builder = local_var_req_builder.header("X-End-User-Wallet-Id", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdCancelPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Drops a stuck ETH transaction and creates a replacement transaction.
    async fn transactions_tx_id_drop_post(&self,  params: TransactionsTxIdDropPostParams ) -> Result<models::DropTransactionResponse, Error<TransactionsTxIdDropPostError>> {
        
        let TransactionsTxIdDropPostParams {
            tx_id,
            x_end_user_wallet_id,
            drop_transaction_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}/drop", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = x_end_user_wallet_id {
            local_var_req_builder = local_var_req_builder.header("X-End-User-Wallet-Id", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&drop_transaction_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdDropPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Freezes a transaction by ID.
    async fn transactions_tx_id_freeze_post(&self,  params: TransactionsTxIdFreezePostParams ) -> Result<models::FreezeTransactionResponse, Error<TransactionsTxIdFreezePostError>> {
        
        let TransactionsTxIdFreezePostParams {
            tx_id,
            x_end_user_wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}/freeze", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = x_end_user_wallet_id {
            local_var_req_builder = local_var_req_builder.header("X-End-User-Wallet-Id", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdFreezePostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a transaction by ID.
    async fn transactions_tx_id_get(&self,  params: TransactionsTxIdGetParams ) -> Result<models::TransactionResponse, Error<TransactionsTxIdGetError>> {
        
        let TransactionsTxIdGetParams {
            tx_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdGetError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Overrides the required number of confirmations for transaction completion by transaction ID.
    async fn transactions_tx_id_set_confirmation_threshold_post(&self,  params: TransactionsTxIdSetConfirmationThresholdPostParams ) -> Result<models::SetConfirmationsThresholdResponse, Error<TransactionsTxIdSetConfirmationThresholdPostError>> {
        
        let TransactionsTxIdSetConfirmationThresholdPostParams {
            tx_id,
            set_confirmations_threshold_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}/set_confirmation_threshold", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&set_confirmations_threshold_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdSetConfirmationThresholdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Unfreezes a transaction by ID and makes the transaction available again.
    async fn transactions_tx_id_unfreeze_post(&self,  params: TransactionsTxIdUnfreezePostParams ) -> Result<models::UnfreezeTransactionResponse, Error<TransactionsTxIdUnfreezePostError>> {
        
        let TransactionsTxIdUnfreezePostParams {
            tx_id,
            x_end_user_wallet_id,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/transactions/{txId}/unfreeze", local_var_configuration.base_path, txId=crate::apis::urlencode(tx_id));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = x_end_user_wallet_id {
            local_var_req_builder = local_var_req_builder.header("X-End-User-Wallet-Id", local_var_param_value.to_string());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TransactionsTxIdUnfreezePostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Overrides the required number of confirmations for transaction completion by transaction hash.
    async fn tx_hash_tx_hash_set_confirmation_threshold_post(&self,  params: TxHashTxHashSetConfirmationThresholdPostParams ) -> Result<models::SetConfirmationsThresholdResponse, Error<TxHashTxHashSetConfirmationThresholdPostError>> {
        
        let TxHashTxHashSetConfirmationThresholdPostParams {
            tx_hash,
            set_confirmations_threshold_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/txHash/{txHash}/set_confirmation_threshold", local_var_configuration.base_path, txHash=crate::apis::urlencode(tx_hash));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&set_confirmations_threshold_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TxHashTxHashSetConfirmationThresholdPostError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`transactions_estimate_fee_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsEstimateFeePostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_external_tx_id_external_tx_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsExternalTxIdExternalTxIdGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsGetError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_cancel_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdCancelPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_drop_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdDropPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_freeze_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdFreezePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdGetError {
    Status400(models::Error),
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_set_confirmation_threshold_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdSetConfirmationThresholdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transactions_tx_id_unfreeze_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransactionsTxIdUnfreezePostError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tx_hash_tx_hash_set_confirmation_threshold_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TxHashTxHashSetConfirmationThresholdPostError {
    DefaultResponse(models::Error),
    UnknownValue(serde_json::Value),
}

