// Fireblocks API
//
// Fireblocks provides a suite of applications to manage digital asset operations and a complete development platform to build your business on the blockchain.  - Visit our website for more information: [Fireblocks Website](https://fireblocks.com) - Visit our developer docs: [Fireblocks DevPortal](https://developers.fireblocks.com)
//
// The version of the OpenAPI document: 1.8.0
// Contact: developers@fireblocks.com
// Generated by: https://openapi-generator.tech

use {
    super::{configuration, Error},
    crate::{apis::ResponseContent, models},
    async_trait::async_trait,
    reqwest,
    serde::{Deserialize, Serialize},
    std::sync::Arc,
};

#[async_trait]
pub trait KeyLinkBetaApi: Send + Sync {
    async fn create_signing_key(
        &self,
        params: CreateSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<CreateSigningKeyError>>;
    async fn create_validation_key(
        &self,
        params: CreateValidationKeyParams,
    ) -> Result<models::CreateValidationKeyResponseDto, Error<CreateValidationKeyError>>;
    async fn disable_validation_key(
        &self,
        params: DisableValidationKeyParams,
    ) -> Result<models::ValidationKeyDto, Error<DisableValidationKeyError>>;
    async fn get_signing_key(
        &self,
        params: GetSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<GetSigningKeyError>>;
    async fn get_signing_keys_list(
        &self,
        params: GetSigningKeysListParams,
    ) -> Result<models::GetSigningKeyResponseDto, Error<GetSigningKeysListError>>;
    async fn get_validation_key(
        &self,
        params: GetValidationKeyParams,
    ) -> Result<models::ValidationKeyDto, Error<GetValidationKeyError>>;
    async fn get_validation_keys_list(
        &self,
        params: GetValidationKeysListParams,
    ) -> Result<models::GetValidationKeyResponseDto, Error<GetValidationKeysListError>>;
    async fn set_agent_id(&self, params: SetAgentIdParams) -> Result<(), Error<SetAgentIdError>>;
    async fn update_signing_key(
        &self,
        params: UpdateSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<UpdateSigningKeyError>>;
}

pub struct KeyLinkBetaApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl KeyLinkBetaApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}

/// struct for passing parameters to the method [`create_signing_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateSigningKeyParams {
    pub create_signing_key_dto: models::CreateSigningKeyDto,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`create_validation_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateValidationKeyParams {
    pub create_validation_key_dto: models::CreateValidationKeyDto,
    /// A unique identifier for the request. If the request is sent multiple
    /// times with the same idempotency key, the server will return the same
    /// response as the first request. The idempotency key is valid for 24
    /// hours.
    pub idempotency_key: Option<String>,
}

/// struct for passing parameters to the method [`disable_validation_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct DisableValidationKeyParams {
    /// The unique identifier for the validation key provided by Fireblocks
    pub key_id: String,
    pub modify_validation_key_dto: models::ModifyValidationKeyDto,
}

/// struct for passing parameters to the method [`get_signing_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSigningKeyParams {
    /// The unique identifier for the signing key provided by Fireblocks
    pub key_id: String,
}

/// struct for passing parameters to the method [`get_signing_keys_list`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetSigningKeysListParams {
    /// Cursor to the next page
    pub page_cursor: Option<String>,
    /// Amount of results to return in the next page
    pub page_size: Option<f64>,
    /// Field(s) to use for sorting
    pub sort_by: Option<String>,
    /// Is the order ascending or descending
    pub order: Option<String>,
    /// Return keys assigned to a specific vault
    pub vault_account_id: Option<f64>,
    /// Return keys associated with a specific agent user
    pub agent_user_id: Option<String>,
    /// Return only keys with a specific algorithm
    pub algorithm: Option<String>,
    /// Return keys that have been proof of ownership
    pub enabled: Option<bool>,
    /// Return keys that are proof of ownership but not assigned. Available
    /// filter can be used only when vaultAccountId and enabled filters are not
    /// set
    pub available: Option<bool>,
}

/// struct for passing parameters to the method [`get_validation_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetValidationKeyParams {
    pub key_id: String,
}

/// struct for passing parameters to the method [`get_validation_keys_list`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetValidationKeysListParams {
    /// Cursor to the next page
    pub page_cursor: Option<String>,
    /// Amount of results to return in the next page
    pub page_size: Option<f64>,
    /// Field(s) to use for sorting
    pub sort_by: Option<String>,
    /// Is the order ascending or descending
    pub order: Option<String>,
}

/// struct for passing parameters to the method [`set_agent_id`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct SetAgentIdParams {
    /// The unique identifier for the signing key provided by Fireblocks
    pub key_id: String,
    pub modify_signing_key_agent_id_dto: models::ModifySigningKeyAgentIdDto,
}

/// struct for passing parameters to the method [`update_signing_key`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct UpdateSigningKeyParams {
    /// The unique identifier for the signing key provided by Fireblocks
    pub key_id: String,
    pub modify_signing_key_dto: models::ModifySigningKeyDto,
}

#[async_trait]
impl KeyLinkBetaApi for KeyLinkBetaApiClient {
    /// Adds a new signing key to the workspace. The added key will be linked to
    /// the specific Fireblocks agent user ID. The same user will receive the
    /// proof of ownership message to be signed, and upon successful proof, the
    /// key will become enabled. Please note that this endpoint is available
    /// only for Key Link enabled workspaces. **Note:**  This endpoint is
    /// currently in beta and might be subject to changes. If you want to
    /// participate and learn more about the Fireblocks Key Link, please contact
    /// your Fireblocks Customer Success Manager or send an email to
    /// CSM@fireblocks.com.
    async fn create_signing_key(
        &self,
        params: CreateSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<CreateSigningKeyError>> {
        let CreateSigningKeyParams {
            create_signing_key_dto,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/signing_keys",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&create_signing_key_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<CreateSigningKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Adds a new validation key used to validate signing keys. The new
    /// validation key will undergo an approval process by the workspace quorum.
    /// Please note that this endpoint is available only for Key Link enabled
    /// workspaces. **Note:**  This endpoint is currently in beta and might be
    /// subject to changes. If you want to participate and learn more about the
    /// Fireblocks Key Link, please contact your Fireblocks Customer Success
    /// Manager or send an email to CSM@fireblocks.com.
    async fn create_validation_key(
        &self,
        params: CreateValidationKeyParams,
    ) -> Result<models::CreateValidationKeyResponseDto, Error<CreateValidationKeyError>> {
        let CreateValidationKeyParams {
            create_validation_key_dto,
            idempotency_key,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/validation_keys",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        if let Some(local_var_param_value) = idempotency_key {
            local_var_req_builder =
                local_var_req_builder.header("Idempotency-Key", local_var_param_value.to_string());
        }
        local_var_req_builder = local_var_req_builder.json(&create_validation_key_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<CreateValidationKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Allows disabling validation key even if it has not expired yet. It is
    /// not allowed to enable the validation key back. Another key has to be
    /// used for future validations. Please note that this endpoint is available
    /// only for Key Link enabled workspaces. **Note:**  This endpoint is
    /// currently in beta and might be subject to changes. If you want to
    /// participate and learn more about the Fireblocks Key Link, please contact
    /// your Fireblocks Customer Success Manager or send an email to
    /// CSM@fireblocks.com.
    async fn disable_validation_key(
        &self,
        params: DisableValidationKeyParams,
    ) -> Result<models::ValidationKeyDto, Error<DisableValidationKeyError>> {
        let DisableValidationKeyParams {
            key_id,
            modify_validation_key_dto,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/validation_keys/{keyId}",
            local_var_configuration.base_path,
            keyId = crate::apis::urlencode(key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&modify_validation_key_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<DisableValidationKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a signing key if it exists, identified by the specified
    /// Fireblocks provided `keyId`. Please note that this endpoint is available
    /// only for Key Link enabled workspaces. **Note:**  This endpoint is
    /// currently in beta and might be subject to changes. If you want to
    /// participate and learn more about the Fireblocks Key Link, please contact
    /// your Fireblocks Customer Success Manager or send an email to
    /// CSM@fireblocks.com.
    async fn get_signing_key(
        &self,
        params: GetSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<GetSigningKeyError>> {
        let GetSigningKeyParams { key_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/signing_keys/{keyId}",
            local_var_configuration.base_path,
            keyId = crate::apis::urlencode(key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSigningKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns the list of signing keys in the workspace Please note that this
    /// endpoint is available only for Key Link enabled workspaces. **Note:**
    /// This endpoint is currently in beta and might be subject to changes. If
    /// you want to participate and learn more about the Fireblocks Key Link,
    /// please contact your Fireblocks Customer Success Manager or send an email
    /// to CSM@fireblocks.com.
    async fn get_signing_keys_list(
        &self,
        params: GetSigningKeysListParams,
    ) -> Result<models::GetSigningKeyResponseDto, Error<GetSigningKeysListError>> {
        let GetSigningKeysListParams {
            page_cursor,
            page_size,
            sort_by,
            order,
            vault_account_id,
            agent_user_id,
            algorithm,
            enabled,
            available,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/signing_keys",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = sort_by {
            local_var_req_builder =
                local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = vault_account_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("vaultAccountId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = agent_user_id {
            local_var_req_builder =
                local_var_req_builder.query(&[("agentUserId", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = algorithm {
            local_var_req_builder =
                local_var_req_builder.query(&[("algorithm", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = enabled {
            local_var_req_builder =
                local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = available {
            local_var_req_builder =
                local_var_req_builder.query(&[("available", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetSigningKeysListError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns a validation key if it exists, identified by the specified
    /// `keyId`. Please note that this endpoint is available only for Key Link
    /// enabled workspaces. **Note:**  This endpoint is currently in beta and
    /// might be subject to changes. If you want to participate and learn more
    /// about the Fireblocks Key Link, please contact your Fireblocks Customer
    /// Success Manager or send an email to CSM@fireblocks.com.
    async fn get_validation_key(
        &self,
        params: GetValidationKeyParams,
    ) -> Result<models::ValidationKeyDto, Error<GetValidationKeyError>> {
        let GetValidationKeyParams { key_id } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/validation_keys/{keyId}",
            local_var_configuration.base_path,
            keyId = crate::apis::urlencode(key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetValidationKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Returns the list of validation keys in the workspace Please note that
    /// this endpoint is available only for Key Link enabled workspaces.
    /// **Note:**  This endpoint is currently in beta and might be subject to
    /// changes. If you want to participate and learn more about the Fireblocks
    /// Key Link, please contact your Fireblocks Customer Success Manager or
    /// send an email to CSM@fireblocks.com.
    async fn get_validation_keys_list(
        &self,
        params: GetValidationKeysListParams,
    ) -> Result<models::GetValidationKeyResponseDto, Error<GetValidationKeysListError>> {
        let GetValidationKeysListParams {
            page_cursor,
            page_size,
            sort_by,
            order,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/validation_keys",
            local_var_configuration.base_path
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = page_cursor {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageCursor", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page_size {
            local_var_req_builder =
                local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = sort_by {
            local_var_req_builder =
                local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = order {
            local_var_req_builder =
                local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<GetValidationKeysListError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Can modify existing signing key id if the key is not enabled. The change
    /// done in background and will be visible once applied. If key is already
    /// enabled (after proof of ownership) the user cannot be changed. Please
    /// note that this endpoint is available only for Key Link enabled
    /// workspaces. **Note:**  This endpoint is currently in beta and might be
    /// subject to changes. If you want to participate and learn more about the
    /// Fireblocks Key Link, please contact your Fireblocks Customer Success
    /// Manager or send an email to CSM@fireblocks.com.
    async fn set_agent_id(&self, params: SetAgentIdParams) -> Result<(), Error<SetAgentIdError>> {
        let SetAgentIdParams {
            key_id,
            modify_signing_key_agent_id_dto,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/signing_keys/{keyId}/agent_user_id",
            local_var_configuration.base_path,
            keyId = crate::apis::urlencode(key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&modify_signing_key_agent_id_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            Ok(())
        } else {
            let local_var_entity: Option<SetAgentIdError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Allows assigning the signing key to a vault account, if it hasn't been
    /// assigned to any other vault accounts yet. Please note that this endpoint
    /// is available only for Key Link enabled workspaces. **Note:**  This
    /// endpoint is currently in beta and might be subject to changes. If you
    /// want to participate and learn more about the Fireblocks Key Link, please
    /// contact your Fireblocks Customer Success Manager or send an email to
    /// CSM@fireblocks.com.
    async fn update_signing_key(
        &self,
        params: UpdateSigningKeyParams,
    ) -> Result<models::SigningKeyDto, Error<UpdateSigningKeyError>> {
        let UpdateSigningKeyParams {
            key_id,
            modify_signing_key_dto,
        } = params;

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!(
            "{}/key_link/signing_keys/{keyId}",
            local_var_configuration.base_path,
            keyId = crate::apis::urlencode(key_id)
        );
        let mut local_var_req_builder =
            local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder
                .header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&modify_signing_key_dto);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<UpdateSigningKeyError> =
                serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent {
                status: local_var_status,
                content: local_var_content,
                entity: local_var_entity,
            };
            Err(Error::ResponseError(local_var_error))
        }
    }
}

/// struct for typed errors of method [`create_signing_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSigningKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_validation_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateValidationKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`disable_validation_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DisableValidationKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_signing_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSigningKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_signing_keys_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSigningKeysListError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_validation_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetValidationKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_validation_keys_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetValidationKeysListError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`set_agent_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SetAgentIdError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_signing_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSigningKeyError {
    DefaultResponse(models::ErrorSchema),
    UnknownValue(serde_json::Value),
}
