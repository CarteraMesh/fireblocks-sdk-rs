/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */


use async_trait::async_trait;
use reqwest;
use std::sync::Arc;
use serde::{Deserialize, Serialize};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration};

#[async_trait]
pub trait TravelRuleBetaApi: Send + Sync {
    async fn travel_rule_api_controller_find_all_vasp(&self,  params: TravelRuleApiControllerFindAllVaspParams ) -> Result<models::TravelRuleGetAllVaspsResponse, Error<TravelRuleApiControllerFindAllVaspError>>;
    async fn travel_rule_api_controller_find_vasp(&self,  params: TravelRuleApiControllerFindVaspParams ) -> Result<models::TravelRuleVasp, Error<TravelRuleApiControllerFindVaspError>>;
    async fn travel_rule_api_controller_update_vasp(&self,  params: TravelRuleApiControllerUpdateVaspParams ) -> Result<models::TravelRuleUpdateVaspDetails, Error<TravelRuleApiControllerUpdateVaspError>>;
    async fn travel_rule_api_controller_validate(&self,  params: TravelRuleApiControllerValidateParams ) -> Result<models::TravelRuleValidateTransactionResponse, Error<TravelRuleApiControllerValidateError>>;
    async fn travel_rule_api_controller_validate_full(&self,  params: TravelRuleApiControllerValidateFullParams ) -> Result<models::TravelRuleValidateTransactionResponse, Error<TravelRuleApiControllerValidateFullError>>;
}

pub struct TravelRuleBetaApiClient {
    configuration: Arc<configuration::Configuration>
}

impl TravelRuleBetaApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
        Self { configuration }
    }
}


/// struct for passing parameters to the method [`travel_rule_api_controller_find_all_vasp`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TravelRuleApiControllerFindAllVaspParams {
    /// Field to order by
    pub order: Option<String>,
    /// Records per page
    pub per_page: Option<f64>,
    /// Page number
    pub page: Option<f64>,
    /// CSV of fields to return (all, \"blank\" or see list of all field names below)
    pub fields: Option<String>
}

/// struct for passing parameters to the method [`travel_rule_api_controller_find_vasp`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TravelRuleApiControllerFindVaspParams {
    pub did: String,
    /// CSV of fields to return (all, \"blank\" or see list of all field names below)
    pub fields: Option<String>
}

/// struct for passing parameters to the method [`travel_rule_api_controller_update_vasp`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TravelRuleApiControllerUpdateVaspParams {
    pub travel_rule_update_vasp_details: models::TravelRuleUpdateVaspDetails
}

/// struct for passing parameters to the method [`travel_rule_api_controller_validate`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TravelRuleApiControllerValidateParams {
    pub travel_rule_validate_transaction_request: models::TravelRuleValidateTransactionRequest
}

/// struct for passing parameters to the method [`travel_rule_api_controller_validate_full`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct TravelRuleApiControllerValidateFullParams {
    pub travel_rule_validate_full_transaction_request: models::TravelRuleValidateFullTransactionRequest
}


#[async_trait]
impl TravelRuleBetaApi for TravelRuleBetaApiClient {
    /// Get All VASPs.  Returns a list of VASPs. VASPs can be searched and sorted and results are paginated.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
    async fn travel_rule_api_controller_find_all_vasp(&self,  params: TravelRuleApiControllerFindAllVaspParams ) -> Result<models::TravelRuleGetAllVaspsResponse, Error<TravelRuleApiControllerFindAllVaspError>> {
        
        let TravelRuleApiControllerFindAllVaspParams {
            order,
            per_page,
            page,
            fields,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/screening/travel_rule/vasp", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = order {
            local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = per_page {
            local_var_req_builder = local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = page {
            local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_str) = fields {
            local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TravelRuleApiControllerFindAllVaspError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Get VASP Details.  Returns information about a VASP that has the specified DID.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
    async fn travel_rule_api_controller_find_vasp(&self,  params: TravelRuleApiControllerFindVaspParams ) -> Result<models::TravelRuleVasp, Error<TravelRuleApiControllerFindVaspError>> {
        
        let TravelRuleApiControllerFindVaspParams {
            did,
            fields,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/screening/travel_rule/vasp/{did}", local_var_configuration.base_path, did=crate::apis::urlencode(did));
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

        if let Some(ref local_var_str) = fields {
            local_var_req_builder = local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
        }
        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TravelRuleApiControllerFindVaspError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Update VASP Details.  Updates a VASP with the provided parameters. Use this endpoint to add your public jsonDIDkey generated by Notabene.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
    async fn travel_rule_api_controller_update_vasp(&self,  params: TravelRuleApiControllerUpdateVaspParams ) -> Result<models::TravelRuleUpdateVaspDetails, Error<TravelRuleApiControllerUpdateVaspError>> {
        
        let TravelRuleApiControllerUpdateVaspParams {
            travel_rule_update_vasp_details,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/screeening/travel_rule/vasp/update", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&travel_rule_update_vasp_details);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TravelRuleApiControllerUpdateVaspError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Validate Travel Rule transactions.  Checks what beneficiary VASP details are required by your jurisdiction and the beneficiary's jurisdiction.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
    async fn travel_rule_api_controller_validate(&self,  params: TravelRuleApiControllerValidateParams ) -> Result<models::TravelRuleValidateTransactionResponse, Error<TravelRuleApiControllerValidateError>> {
        
        let TravelRuleApiControllerValidateParams {
            travel_rule_validate_transaction_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/screening/travel_rule/transaction/validate", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&travel_rule_validate_transaction_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TravelRuleApiControllerValidateError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

    /// Validate Full Travel Rule transactions.  Checks for all required information on the originator and beneficiary VASPs.  **Note:** The reference content in this section documents the Travel Rule beta endpoint. The beta endpoint includes APIs that are currently in preview and aren't yet generally available.  To enroll in the beta and enable this endpoint, contact your Fireblocks Customer Success Manager or send an email to [CSM@fireblocks.com](mailto:CSM@fireblocks.com).
    async fn travel_rule_api_controller_validate_full(&self,  params: TravelRuleApiControllerValidateFullParams ) -> Result<models::TravelRuleValidateTransactionResponse, Error<TravelRuleApiControllerValidateFullError>> {
        
        let TravelRuleApiControllerValidateFullParams {
            travel_rule_validate_full_transaction_request,
        } = params;
        

        let local_var_configuration = &self.configuration;

        let local_var_client = &local_var_configuration.client;

        let local_var_uri_str = format!("{}/screening/travel_rule/transaction/validate/full", local_var_configuration.base_path);
        let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

        if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
            local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
        }
        local_var_req_builder = local_var_req_builder.json(&travel_rule_validate_full_transaction_request);

        let local_var_req = local_var_req_builder.build()?;
        let local_var_resp = local_var_client.execute(local_var_req).await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Error::from)
        } else {
            let local_var_entity: Option<TravelRuleApiControllerValidateFullError> = serde_json::from_str(&local_var_content).ok();
            let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
            Err(Error::ResponseError(local_var_error))
        }
    }

}

/// struct for typed errors of method [`travel_rule_api_controller_find_all_vasp`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TravelRuleApiControllerFindAllVaspError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`travel_rule_api_controller_find_vasp`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TravelRuleApiControllerFindVaspError {
    Status400(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`travel_rule_api_controller_update_vasp`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TravelRuleApiControllerUpdateVaspError {
    Status400(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`travel_rule_api_controller_validate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TravelRuleApiControllerValidateError {
    Status400(),
    Status500(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`travel_rule_api_controller_validate_full`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TravelRuleApiControllerValidateFullError {
    Status400(),
    Status500(),
    UnknownValue(serde_json::Value),
}

