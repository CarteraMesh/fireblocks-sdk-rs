/*
 * Fireblocks API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.7.5
 * Contact: support@fireblocks.com
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use async_trait::async_trait;
use reqwest;
use serde::{Deserialize, Serialize};
use std::sync::Arc;

#[async_trait]
pub trait WalletLinkApi: Send + Sync {
  async fn create(&self, params: CreateParams) -> Result<models::CreateConnectionResponse, Error<CreateError>>;
  async fn get(&self, params: GetParams) -> Result<models::GetConnectionsResponse, Error<GetError>>;
  async fn remove(&self, params: RemoveParams) -> Result<(), Error<RemoveError>>;
  async fn submit(&self, params: SubmitParams) -> Result<(), Error<SubmitError>>;
}

pub struct WalletLinkApiClient {
  configuration: Arc<configuration::Configuration>,
}

impl WalletLinkApiClient {
  pub fn new(configuration: Arc<configuration::Configuration>) -> Self {
    Self { configuration }
  }
}

/// struct for passing parameters to the method [`create`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct CreateParams {
  pub create_request: models::CreateRequest,
}

/// struct for passing parameters to the method [`get`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetParams {
  /// List order; ascending or descending.
  pub order: Option<String>,
  /// Parsed filter object
  pub filter: Option<models::GetFilterParameter>,
  /// Property to sort dApp connections by.
  pub sort: Option<String>,
  /// Amount of results to return in the next page.
  pub page_size: Option<f64>,
  /// Cursor to the next page
  pub next: Option<String>,
}

/// struct for passing parameters to the method [`remove`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct RemoveParams {
  /// The ID of the existing dApp connection to remove.
  pub id: String,
}

/// struct for passing parameters to the method [`submit`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct SubmitParams {
  /// The ID of the initiated dApp connection to approve.
  pub id: String,
  pub respond_to_connection_request: models::RespondToConnectionRequest,
}

#[async_trait]
impl WalletLinkApi for WalletLinkApiClient {
  /// Create a new dApp connection.  * Note: After this succeeds, make a request to `PUT /v1/connections/wc/{id}` (below) to approve or reject the new dApp connection.
  async fn create(&self, params: CreateParams) -> Result<models::CreateConnectionResponse, Error<CreateError>> {
    let CreateParams { create_request } = params;

    let local_var_configuration = &self.configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/connections/wc", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
      local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
      serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
      let local_var_entity: Option<CreateError> = serde_json::from_str(&local_var_content).ok();
      let local_var_error =
        ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
      Err(Error::ResponseError(local_var_error))
    }
  }

  /// List all open dApp connections.
  async fn get(&self, params: GetParams) -> Result<models::GetConnectionsResponse, Error<GetError>> {
    let GetParams { order, filter, sort, page_size, next } = params;

    let local_var_configuration = &self.configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/connections", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = order {
      local_var_req_builder = local_var_req_builder.query(&[("order", &local_var_str.to_string())]);
    }
    if let Some(ref _local_var_str) = filter {
      tracing::warn!("filter not yet supported");
      //local_var_req_builder = local_var_req_builder.query(&[("filter", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
      local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
      local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = next {
      local_var_req_builder = local_var_req_builder.query(&[("next", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
      local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
      serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
      let local_var_entity: Option<GetError> = serde_json::from_str(&local_var_content).ok();
      let local_var_error =
        ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
      Err(Error::ResponseError(local_var_error))
    }
  }

  /// Remove an existing dApp connection
  async fn remove(&self, params: RemoveParams) -> Result<(), Error<RemoveError>> {
    let RemoveParams { id } = params;

    let local_var_configuration = &self.configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str =
      format!("{}/connections/wc/{id}", local_var_configuration.base_path, id = crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
      local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
      Ok(())
    } else {
      let local_var_entity: Option<RemoveError> = serde_json::from_str(&local_var_content).ok();
      let local_var_error =
        ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
      Err(Error::ResponseError(local_var_error))
    }
  }

  /// Submit a response to *approve* or *reject* an initiated dApp connection. * Note: This call is used to complete your `POST /v1/connections/wc/` request.  After this succeeds, your new dApp connection is created and functioning.
  async fn submit(&self, params: SubmitParams) -> Result<(), Error<SubmitError>> {
    let SubmitParams { id, respond_to_connection_request } = params;

    let local_var_configuration = &self.configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str =
      format!("{}/connections/wc/{id}", local_var_configuration.base_path, id = crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
      local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&respond_to_connection_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
      Ok(())
    } else {
      let local_var_entity: Option<SubmitError> = serde_json::from_str(&local_var_content).ok();
      let local_var_error =
        ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
      Err(Error::ResponseError(local_var_error))
    }
  }
}

/// struct for typed errors of method [`create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateError {
  Status400(),
  Status500(),
  UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetError {
  Status400(),
  Status500(),
  UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RemoveError {
  Status404(),
  Status500(),
  UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`submit`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SubmitError {
  Status400(),
  Status404(),
  Status500(),
  UnknownValue(serde_json::Value),
}
